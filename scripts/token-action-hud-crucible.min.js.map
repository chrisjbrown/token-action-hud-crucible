{"version":3,"file":"token-action-hud-crucible.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: \"token-action-hud-crucible\",\n};\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: \"token-action-hud-core\",\n};\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = \"2.0\";\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n  actions: \"actions\",\n  ability: \"crucible.Ability\",\n  check: \"tokenActionHud.crucible.check\",\n  condition: \"tokenActionHud.crucible.condition\",\n  counter: \"tokenActionHud.crucible.counter\",\n  effect: \"crucible.Effect\",\n  exhaustion: \"crucible.Exhaustion\",\n  feature: \"TYPES.Item.feat\",\n  item: \"tokenActionHud.crucible.item\",\n  save: \"crucible.SAVE.Title.one\",\n  skill: \"tokenActionHud.crucible.skill\",\n  spell: \"TYPES.Item.spell\",\n  utility: \"crucible.ActionUtil\",\n};\n\n/**\n * Activation types\n */\nexport const ACTIVATION_TYPE = {\n  action: { group: \"actions\" },\n  bonus: { group: \"bonus-actions\", icon: \"fas fa-plus\" },\n  crew: { group: \"crew-actions\", icon: \"fas fa-users\" },\n  day: { icon: \"fas fa-hourglass-end\" },\n  hour: { icon: \"fas fa-hourglass-half\" },\n  lair: { group: \"lair-actions\", icon: \"fas fa-home\" },\n  minute: { icon: \"fas fa-hourglass-start\" },\n  legendary: { group: \"legendary-actions\", icon: \"fas fas fa-dragon\" },\n  reaction: { group: \"reactions\", icon: \"fas fa-bolt\" },\n  reactiondamage: { group: \"reactions\", icon: \"fas fa-bolt\" },\n  reactionmanual: { group: \"reactions\", icon: \"fas fa-bolt\" },\n  special: { group: \"special-actions\", icon: \"fas fa-star\" },\n  other: { group: \"other-actions\" },\n};\n\n/**\n * Concentration icon\n */\nexport const CONCENTRATION_ICON =\n  \"systems/crucible/icons/svg/statuses/concentrating.svg\";\n\nexport const CUSTOM_crucible = {\n  ID: \"custom-crucible\",\n  COUNTERS: {\n    character: \"character-counters\",\n    group: \"group-counters\",\n    npc: \"npc-counters\",\n  },\n};\n\n/**\n * Feature Group IDs\n */\nexport const FEATURE_GROUP_IDS = [\n  \"activeFeatures\",\n  \"passiveFeatures\",\n  \"backgroundFeatures\",\n  \"classFeatures\",\n  \"feats\",\n  \"monsterFeatures\",\n  \"raceFeatures\",\n  \"artificerInfusions\",\n  \"channelDivinity\",\n  \"defensiveTactics\",\n  \"eldritchInvocations\",\n  \"elementalDisciplines\",\n  \"fightingStyles\",\n  \"huntersPrey\",\n  \"kiAbilities\",\n  \"maneuvers\",\n  \"metamagicOptions\",\n  \"multiattacks\",\n  \"pactBoons\",\n  \"psionicPowers\",\n  \"runes\",\n  \"superiorHuntersDefense\",\n];\n\n/**\n * Groups\n */\nexport const GROUP = {\n  _1stLevelSpells: {\n    id: \"1st-level-spells\",\n    name: \"tokenActionHud.crucible.1stLevelSpells\",\n    spellMode: 1,\n    type: \"system\",\n  },\n  _2ndLevelSpells: {\n    id: \"2nd-level-spells\",\n    name: \"tokenActionHud.crucible.2ndLevelSpells\",\n    spellMode: 2,\n    type: \"system\",\n  },\n  _3rdLevelSpells: {\n    id: \"3rd-level-spells\",\n    name: \"tokenActionHud.crucible.3rdLevelSpells\",\n    spellMode: 3,\n    type: \"system\",\n  },\n  _4thLevelSpells: {\n    id: \"4th-level-spells\",\n    name: \"tokenActionHud.crucible.4thLevelSpells\",\n    spellMode: 4,\n    type: \"system\",\n  },\n  _5thLevelSpells: {\n    id: \"5th-level-spells\",\n    name: \"tokenActionHud.crucible.5thLevelSpells\",\n    spellMode: 5,\n    type: \"system\",\n  },\n  _6thLevelSpells: {\n    id: \"6th-level-spells\",\n    name: \"tokenActionHud.crucible.6thLevelSpells\",\n    spellMode: 6,\n    type: \"system\",\n  },\n  _7thLevelSpells: {\n    id: \"7th-level-spells\",\n    name: \"tokenActionHud.crucible.7thLevelSpells\",\n    spellMode: 7,\n    type: \"system\",\n  },\n  _8thLevelSpells: {\n    id: \"8th-level-spells\",\n    name: \"tokenActionHud.crucible.8thLevelSpells\",\n    spellMode: 8,\n    type: \"system\",\n  },\n  _9thLevelSpells: {\n    id: \"9th-level-spells\",\n    name: \"tokenActionHud.crucible.9thLevelSpells\",\n    spellMode: 9,\n    type: \"system\",\n  },\n  abilities: {\n    id: \"abilities\",\n    name: \"tokenActionHud.crucible.abilities\",\n    type: \"system\",\n  },\n  actions: {\n    id: \"actions\",\n    name: \"tokenActionHud.crucible.actions\",\n    type: \"system\",\n  },\n  activeFeatures: {\n    id: \"active-features\",\n    name: \"tokenActionHud.crucible.activeFeatures\",\n    type: \"system\",\n  },\n  artificerInfusions: {\n    id: \"artificer-infusions\",\n    name: \"tokenActionHud.crucible.artificerInfusions\",\n    type: \"system\",\n  },\n  atWillSpells: {\n    id: \"at-will-spells\",\n    name: \"tokenActionHud.crucible.atWillSpells\",\n    spellMode: \"atwill\",\n    type: \"system\",\n  },\n  backgroundFeatures: {\n    id: \"background-features\",\n    name: \"tokenActionHud.crucible.backgroundFeatures\",\n    type: \"system\",\n  },\n  bonusActions: {\n    id: \"bonus-actions\",\n    name: \"tokenActionHud.crucible.bonusActions\",\n    type: \"system\",\n  },\n  cantrips: {\n    id: \"cantrips\",\n    name: \"tokenActionHud.crucible.cantrips\",\n    spellMode: 0,\n    type: \"system\",\n  },\n  channelDivinity: {\n    id: \"channel-divinity\",\n    name: \"tokenActionHud.crucible.channelDivinity\",\n    type: \"system\",\n  },\n  checks: {\n    id: \"checks\",\n    name: \"tokenActionHud.crucible.checks\",\n    type: \"system\",\n  },\n  classFeatures: {\n    id: \"class-features\",\n    name: \"tokenActionHud.crucible.classFeatures\",\n    type: \"system\",\n  },\n  combat: { id: \"combat\", name: \"tokenActionHud.combat\", type: \"system\" },\n  conditions: {\n    id: \"conditions\",\n    name: \"tokenActionHud.crucible.conditions\",\n    type: \"system\",\n  },\n  consumables: {\n    id: \"consumables\",\n    name: \"TYPES.Item.consumablePl\",\n    type: \"system\",\n  },\n  containers: {\n    id: \"containers\",\n    name: \"TYPES.Item.containerPl\",\n    type: \"system\",\n  },\n  counters: {\n    id: \"counters\",\n    name: \"tokenActionHud.crucible.counters\",\n    type: \"system\",\n  },\n  crewActions: {\n    id: \"crew-actions\",\n    name: \"tokenActionHud.crucible.crewActions\",\n    type: \"system\",\n  },\n  defensiveTactics: {\n    id: \"defensive-tactics\",\n    name: \"tokenActionHud.crucible.defensiveTactics\",\n    type: \"system\",\n  },\n  eldritchInvocations: {\n    id: \"eldritch-invocations\",\n    name: \"tokenActionHud.crucible.eldritchInvocations\",\n    type: \"system\",\n  },\n  elementalDisciplines: {\n    id: \"elemental-disciplines\",\n    name: \"tokenActionHud.crucible.elementalDisciplines\",\n    type: \"system\",\n  },\n  equipment: {\n    id: \"equipment\",\n    name: \"TYPES.Item.equipmentPl\",\n    type: \"system\",\n  },\n  equipped: { id: \"equipped\", name: \"crucible.Equipped\", type: \"system\" },\n  exhaustion: { id: \"exhaustion\", name: \"crucible.Exhaustion\", type: \"system\" },\n  feats: { id: \"feats\", name: \"tokenActionHud.crucible.feats\", type: \"system\" },\n  fightingStyles: {\n    id: \"fighting-styles\",\n    name: \"tokenActionHud.crucible.fightingStyles\",\n    type: \"system\",\n  },\n  huntersPrey: {\n    id: \"hunters-prey\",\n    name: \"tokenActionHud.crucible.huntersPrey\",\n    type: \"system\",\n  },\n  innateSpells: {\n    id: \"innate-spells\",\n    name: \"tokenActionHud.crucible.innateSpells\",\n    spellMode: \"innate\",\n    type: \"system\",\n  },\n  kiAbilities: {\n    id: \"ki-abilities\",\n    name: \"tokenActionHud.crucible.kiAbilities\",\n    type: \"system\",\n  },\n  lairActions: {\n    id: \"lair-actions\",\n    name: \"tokenActionHud.crucible.lairActions\",\n    type: \"system\",\n  },\n  legendaryActions: {\n    id: \"legendary-actions\",\n    name: \"tokenActionHud.crucible.legendaryActions\",\n    type: \"system\",\n  },\n  loot: { id: \"loot\", name: \"TYPES.Item.lootPl\", type: \"system\" },\n  maneuvers: {\n    id: \"maneuvers\",\n    name: \"tokenActionHud.crucible.maneuvers\",\n    type: \"system\",\n  },\n  metamagicOptions: {\n    id: \"metamagic-options\",\n    name: \"tokenActionHud.crucible.metamagicOptions\",\n    type: \"system\",\n  },\n  monsterFeatures: {\n    id: \"monster-features\",\n    name: \"tokenActionHud.crucible.monsterFeatures\",\n    type: \"system\",\n  },\n  multiattacks: {\n    id: \"multiattacks\",\n    name: \"tokenActionHud.crucible.multiattacks\",\n    type: \"system\",\n  },\n  otherActions: {\n    id: \"other-actions\",\n    name: \"tokenActionHud.crucible.otherActions\",\n    type: \"system\",\n  },\n  pactBoons: {\n    id: \"pact-boons\",\n    name: \"tokenActionHud.crucible.pactBoons\",\n    type: \"system\",\n  },\n  pactSpells: {\n    id: \"pact-spells\",\n    name: \"tokenActionHud.crucible.pactSpells\",\n    spellMode: \"pact\",\n    type: \"system\",\n  },\n  passiveEffects: {\n    id: \"passive-effects\",\n    name: \"crucible.EffectPassive\",\n    type: \"system\",\n  },\n  passiveFeatures: {\n    id: \"passive-features\",\n    name: \"tokenActionHud.crucible.passiveFeatures\",\n    type: \"system\",\n  },\n  psionicPowers: {\n    id: \"psionic-powers\",\n    name: \"tokenActionHud.crucible.psionicPowers\",\n    type: \"system\",\n  },\n  raceFeatures: {\n    id: \"race-features\",\n    name: \"tokenActionHud.crucible.raceFeatures\",\n    type: \"system\",\n  },\n  reactions: { id: \"reactions\", name: \"crucible.ReactionPl\", type: \"system\" },\n  rests: { id: \"rests\", name: \"tokenActionHud.crucible.rests\", type: \"system\" },\n  runes: { id: \"runes\", name: \"tokenActionHud.crucible.runes\", type: \"system\" },\n  saves: { id: \"saves\", name: \"crucible.ClassSaves\", type: \"system\" },\n  skills: {\n    id: \"skills\",\n    name: \"tokenActionHud.crucible.skills\",\n    type: \"system\",\n  },\n  superiorHuntersDefense: {\n    id: \"superior-hunters-defense\",\n    name: \"tokenActionHud.crucible.superiorHuntersDefense\",\n    type: \"system\",\n  },\n  temporaryEffects: {\n    id: \"temporary-effects\",\n    name: \"crucible.EffectTemporary\",\n    type: \"system\",\n  },\n  token: { id: \"token\", name: \"tokenActionHud.token\", type: \"system\" },\n  tools: { id: \"tools\", name: \"TYPES.Item.toolPl\", type: \"system\" },\n  unequipped: { id: \"unequipped\", name: \"crucible.Unequipped\", type: \"system\" },\n  utility: { id: \"utility\", name: \"tokenActionHud.utility\", type: \"system\" },\n  weapons: { id: \"weapons\", name: \"TYPES.Item.weaponPl\", type: \"system\" },\n};\n\n/**\n * Prepared icon\n */\nexport const PREPARED_ICON = \"fas fa-sun\";\n\n/**\n * Proficiency level icons\n */\nexport const PROFICIENCY_LEVEL_ICON = {\n  0: \"fa-regular fa-circle\",\n  0.5: \"fa-regular fa-circle-half-stroke\",\n  1: \"fa-solid fa-circle\",\n  2: \"fa-regular fa-circle-dot\",\n};\n\n/**\n * Rarity\n */\nexport const RARITY = {\n  common: \"tokenActionHud.crucible.common\",\n  uncommon: \"tokenActionHud.crucible.uncommon\",\n  rare: \"tokenActionHud.crucible.rare\",\n  veryRare: \"tokenActionHud.crucible.veryRare\",\n  legendary: \"tokenActionHud.crucible.legendary\",\n  artifact: \"tokenActionHud.crucible.artifact\",\n};\n\n/**\n * Ritual icon\n */\nexport const RITUAL_ICON = \"fas fa-circle-r\";\n\n/**\n * Spell Group IDs\n */\nexport const SPELL_GROUP_IDS = [\n  \"cantrips\",\n  \"_1stLevelSpells\",\n  \"_2ndLevelSpells\",\n  \"_3rdLevelSpells\",\n  \"_4thLevelSpells\",\n  \"_5thLevelSpells\",\n  \"_6thLevelSpells\",\n  \"_7thLevelSpells\",\n  \"_8thLevelSpells\",\n  \"_9thLevelSpells\",\n  \"atWillSpells\",\n  \"innateSpells\",\n  \"pactSpells\",\n];\n","import { MODULE } from \"./constants.js\";\n\nexport let Utils = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\n  Utils = class Utils {\n    /**\n     * Capitalize the first letter of every word\n     * @param {string} value The string to capitalize\n     * @returns {string}     The capitalized string\n     */\n    static capitalize(value) {\n      return value.replace(\n        /\\w\\S*/g,\n        text => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()\n      );\n    }\n\n    /**\n     * Get setting value\n     * @param {string} key The key\n     * @param {string=null} defaultValue The default value\n     * @returns {*} The setting value\n     */\n    static getSetting(key, defaultValue = null) {\n      let value = defaultValue ?? null;\n      try {\n        value = game.settings.get(MODULE.ID, key);\n      } catch{\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\n      }\n      return value;\n    }\n\n    /**\n     * Set setting value\n     * @param {string} key The key\n     * @param {string} value The value\n     */\n    static async setSetting(key, value) {\n      try {\n        value = await game.settings.set(MODULE.ID, key, value);\n        coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`);\n      } catch{\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\n      }\n    }\n  };\n});\n","// System Module Imports\nimport {\n  ACTIVATION_TYPE,\n  ACTION_TYPE,\n  CONCENTRATION_ICON,\n  CUSTOM_crucible,\n  FEATURE_GROUP_IDS,\n  GROUP,\n  PREPARED_ICON,\n  PROFICIENCY_LEVEL_ICON,\n  RARITY,\n  SPELL_GROUP_IDS,\n} from \"./constants.js\";\nimport { Utils } from \"./utils.js\";\n\nexport let ActionHandler = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    // Initialize action variables\n    featureActions = null;\n\n    inventoryActions = null;\n\n    spellActions = null;\n\n    /**\n     * Build System Actions\n     * @override\n     * @param {Array} groupIds\n     * @returns {object}\n     */\n    async buildSystemActions(groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this.#getValidActors() : [this.actor];\n      this.tokens = !this.token ? this.#getValidTokens() : [this.token];\n\n      // Set items variable\n      if (this.actor) {\n        this.items = coreModule.api.Utils.sortItemsByName(\n          this.#discardSlowItems(this.actor.items)\n        );\n      }\n\n      // Set settings variables\n      this.abbreviateSkills = Utils.getSetting(\"abbreviateSkills\");\n      this.displaySpellInfo = Utils.getSetting(\"displaySpellInfo\");\n      this.showItemsWithoutActivationCosts = Utils.getSetting(\n        \"showItemsWithoutActivationCosts\"\n      );\n      this.showUnchargedItems = Utils.getSetting(\"showUnchargedItems\");\n      this.showUnequippedItems = Utils.getSetting(\"showUnequippedItems\");\n      if (this.actor?.type === \"npc\" && !this.showUnequippedItems) {\n        this.showUnequippedItems = Utils.getSetting(\"showUnequippedItemsNpcs\");\n      }\n      this.showUnpreparedSpells = Utils.getSetting(\"showUnpreparedSpells\");\n\n      this.activationgroupIds = [\n        \"actions\",\n        \"bonus-actions\",\n        \"crew-actions\",\n        \"lair-actions\",\n        \"legendary-actions\",\n        \"reactions\",\n        \"other-actions\",\n      ];\n\n      if (this.actor?.type === \"hero\" || this.actor?.type === \"adversary\") {\n        this.inventorygroupIds = [\n          \"equipped\",\n          \"consumables\",\n          \"containers\",\n          \"equipment\",\n          \"loot\",\n          \"tools\",\n          \"weapons\",\n          \"unequipped\",\n        ];\n\n        await this.#buildCharacterActions();\n      } else if (this.actor?.type === \"vehicle\") {\n        this.inventorygroupIds = [\n          \"consumables\",\n          \"equipment\",\n          \"tools\",\n          \"weapons\",\n        ];\n\n        await this.#buildVehicleActions();\n      } else if (!this.actor) {\n        await this.#buildMultipleTokenActions();\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     * @returns {object}\n     */\n    async #buildCharacterActions() {\n      await Promise.all([\n        this.#buildConditions(),\n        this.#buildBasicActions(),\n        // this.#buildEffects(),\n        // this.#buildFeatures(),\n        // this.#buildInventory(),\n        // this.#buildSpells(),\n      ]);\n      // this.#buildAbilities(\"ability\", \"abilities\");\n      // this.#buildAbilities(\"check\", \"checks\");\n      // this.#buildAbilities(\"save\", \"saves\");\n      this.#buildCombat();\n      // this.#buildCounters();\n      // this.#buildExhaustion();\n      // this.#buildRests();\n      // this.#buildSkills();\n      this.#buildUtility();\n    }\n\n    /**\n     * Build vehicle actions\n     * @private\n     * @returns {object}\n     */\n    async #buildVehicleActions() {\n      await Promise.all([\n        this.#buildConditions(),\n        this.#buildEffects(),\n        this.#buildFeatures(),\n        this.#buildInventory(),\n      ]);\n      this.#buildAbilities(\"ability\", \"abilities\");\n      this.#buildAbilities(\"check\", \"checks\");\n      this.#buildAbilities(\"save\", \"saves\");\n      this.#buildCombat();\n      this.#buildUtility();\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    async #buildMultipleTokenActions() {\n      this.#buildAbilities(\"ability\", \"abilities\");\n      this.#buildAbilities(\"check\", \"checks\");\n      this.#buildAbilities(\"save\", \"saves\");\n      this.#buildCombat();\n      await this.#buildConditions();\n      this.#buildRests();\n      this.#buildSkills();\n      this.#buildUtility();\n    }\n\n    /**\n     * Build abilities\n     * @private\n     * @param {string} actionType\n     * @param {string} groupId\n     */\n    #buildAbilities(actionType, groupId) {\n      // Get abilities and exit if none exist\n      const abilities =\n        this.actor?.system.abilities || CONFIG.crucible.abilities;\n      if (abilities.length === 0) return;\n\n      // Get actions\n      const actions = Object.entries(abilities)\n        .filter((ability) => abilities[ability[0]].value !== 0)\n        .map(([abilityId, ability]) => {\n          const name = CONFIG.crucible.abilities[abilityId].label;\n          const mod = groupId === \"saves\" ? ability?.save : ability?.mod;\n          return {\n            id: `${actionType}-${abilityId}`,\n            name: this.abbreviateSkills ? Utils.capitalize(abilityId) : name,\n            icon1:\n              groupId !== \"checks\"\n                ? this.#getProficiencyIcon(abilities[abilityId].proficient)\n                : \"\",\n            info1: this.actor\n              ? {\n                  text: coreModule.api.Utils.getModifier(mod),\n                  title: `${game.i18n.localize(\n                    \"crucible.ActionAbil\"\n                  )}: ${coreModule.api.Utils.getModifier(mod)}`,\n                }\n              : null,\n            info2:\n              this.actor && groupId === \"abilities\"\n                ? {\n                    text: `(${coreModule.api.Utils.getModifier(\n                      ability?.save\n                    )})`,\n                    title: `${game.i18n.localize(\n                      \"crucible.SavingThrow\"\n                    )}: ${coreModule.api.Utils.getModifier(ability?.save)}`,\n                  }\n                : null,\n            listName: this.#getListName(actionType, name),\n            system: { actionType, actionId: abilityId },\n          };\n        });\n\n      // Add actions to action list\n      this.addActions(actions, { id: groupId });\n    }\n\n    /**\n     * Build activations\n     * @public\n     * @param {object} data  groupData, actionData, actionType\n     */\n    async buildActivations(data) {\n      const { groupData, actionData, actionType = \"item\" } = data;\n\n      // Create map of items according to activation type\n      const activationItems = new Map();\n\n      // Loop items and add to activationItems\n      for (const [key, value] of actionData) {\n        const activationType =\n          value.system?.activities?.contents[0]?.activation?.type;\n        const groupId = ACTIVATION_TYPE[activationType]?.group ?? \"other\";\n        if (!activationItems.has(groupId))\n          activationItems.set(groupId, new Map());\n        activationItems.get(groupId).set(key, value);\n      }\n\n      // Loop through action group ids\n      for (const value of Object.values(ACTIVATION_TYPE)) {\n        const group = value.group;\n\n        // Skip if no items exist\n        if (!activationItems.has(group)) continue;\n\n        // Clone and add to group data\n        const groupDataClone = {\n          ...groupData,\n          id: `${group}+${groupData.id}`,\n          type: \"system-derived\",\n        };\n\n        // Set Equipped and Unequipped groups to not selected by default\n        if ([\"equipped\", \"unequipped\"].includes(groupData.id)) {\n          groupDataClone.defaultSelected = false;\n        }\n\n        // Create parent group data\n        const parentgroupData = { id: group, type: \"system\" };\n\n        // Add group to HUD\n        await this.addGroup(groupDataClone, parentgroupData);\n\n        // Add spell slot info to group\n        if (actionType === \"spell\") {\n          this.addGroupInfo(groupDataClone);\n        }\n\n        // Build actions\n        await this.buildActions({\n          groupData: groupDataClone,\n          actionData: activationItems.get(group),\n          actionType,\n        });\n      }\n    }\n\n    /**\n     * Build combat\n     * @private\n     */\n    #buildCombat() {\n      // If token's turn, include endTurn\n      const combatType = {\n        initiative: \"tokenActionHud.crucible.rollInitiative\",\n        ...(game.combat?.current?.tokenId === this.token?.id && {\n          endTurn: \"tokenActionHud.endTurn\",\n        }),\n      };\n\n      const tokens = coreModule.api.Utils.getControlledTokens();\n      const tokenIds = tokens?.map((token) => token.id);\n      const combatants = game.combat\n        ? game.combat.combatants.filter((combatant) =>\n            tokenIds.includes(combatant.tokenId)\n          )\n        : [];\n\n      const getInfo1 = (id) => {\n        if (id === \"initiative\" && combatants.length === 1) {\n          const currentInitiative = combatants[0].initiative;\n          return { class: \"tah-spotlight\", text: currentInitiative };\n        }\n        return {};\n      };\n\n      const getActive = () => {\n        return combatants.length > 0 &&\n          combatants.every((combatant) => combatant?.initiative)\n          ? \" active\"\n          : \"\";\n      };\n\n      // Get actions\n      const actionType = \"utility\";\n      const actions = Object.entries(combatType).map(([id, name]) => {\n        return {\n          id,\n          name: game.i18n.localize(name),\n          info1: getInfo1(id),\n          cssClass: id === \"initiative\" ? `toggle${getActive()}` : \"\",\n          listName: this.#getListName(actionType, name),\n          system: { actionType, actionId: id },\n        };\n      });\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"combat\" });\n    }\n\n    /**\n     * Build actions\n     * @private\n     */\n    #buildBasicActions() {\n      // Get actions and exit if none exist\n      const actorActions = this.actor?.actions;\n      if (actorActions.length === 0) return;\n\n      // Get actions\n      const actionType = \"action\";\n      const actions = Object.entries(actorActions).map(([actionId, action]) => {\n        const name = action.name;\n        return {\n          id: actionId,\n          name: name,\n          listName: this.#getListName(actionType, name),\n          system: { actionType, actionId: action.id },\n        };\n      });\n\n      // Add actions to action list\n      this.addActions(actions, { id: \"actions\" });\n    }\n\n    /**\n     * Build conditions\n     * @private\n     */\n    async #buildConditions() {\n      if (this.tokens?.length === 0) return;\n\n      // Get conditions and exit if none exist\n      const conditions = CONFIG.statusEffects.filter(\n        (condition) => condition.id !== \"\"\n      );\n      if (conditions.length === 0) return;\n\n      // Get actions\n      const actionType = \"condition\";\n      const actions = await Promise.all(\n        conditions.map(async (condition) => {\n          const hasCondition = this.actors.every((actor) => {\n            return actor.effects.some(\n              (effect) =>\n                effect.statuses.some((status) => status === condition.id) &&\n                !effect?.disabled\n            );\n          });\n          const name = game.i18n.localize(condition.label) ?? condition.label;\n          return {\n            id: condition.id,\n            name,\n            img: coreModule.api.Utils.getImage(condition),\n            cssClass: `toggle${hasCondition ? \" active\" : \"\"}`,\n            listName: this.#getListName(actionType, name),\n            tooltip: await this.#getTooltip(\n              await this.#getConditionTooltipData(condition.id, condition.label)\n            ),\n            system: { actionType, actionId: condition.id },\n          };\n        })\n      );\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"conditions\" });\n    }\n\n    /**\n     * Build counters\n     * @private\n     */\n    async #buildCounters() {\n      if (\n        !coreModule.api.Utils.isModuleActive(CUSTOM_crucible.ID) ||\n        !CUSTOM_crucible.COUNTERS[this.actor?.type]\n      )\n        return;\n\n      const actionType = \"counter\";\n\n      let counters =\n        game.settings.get(\n          CUSTOM_crucible.ID,\n          CUSTOM_crucible.COUNTERS[this.actor?.type]\n        ) ?? {};\n\n      if (\n        coreModule.api.Utils.isModuleActive(CUSTOM_crucible.ID) &&\n        Object.keys(counters).length\n      ) {\n        counters = Object.entries(counters)\n          .filter(([_, value]) => value.visible)\n          .map(([key, value]) => {\n            value.key = key;\n            return value;\n          });\n      } else {\n        counters = [\n          {\n            name: game.i18n.localize(\"crucible.DeathSave\"),\n            type: \"successFailure\",\n            system: true,\n            visible: true,\n            key: \"death-saves\",\n          },\n          {\n            name: game.i18n.localize(\"crucible.Exhaustion\"),\n            type: \"number\",\n            system: true,\n            visible: true,\n            key: \"exhaustion\",\n          },\n          {\n            name: game.i18n.localize(\"crucible.Inspiration\"),\n            type: \"checkbox\",\n            system: true,\n            visible: true,\n            key: \"inspiration\",\n          },\n        ];\n      }\n\n      // Get actions\n      const actions = counters.map((counter) => {\n        let active = \"\";\n        let cssClass = \"\";\n        let img = \"\";\n        let info1 = \"\";\n        if (counter.system) {\n          switch (counter.key) {\n            case \"exhaustion\":\n              active =\n                this.actor.system.attributes.exhaustion > 0 ? \" active\" : \"\";\n              cssClass = `toggle${active}`;\n              img = coreModule.api.Utils.getImage(\n                \"modules/token-action-hud-crucible/icons/exhaustion.svg\"\n              );\n              info1 = { text: this.actor.system.attributes.exhaustion };\n              break;\n            case \"death-saves\":\n              img = coreModule.api.Utils.getImage(\n                \"modules/token-action-hud-crucible/icons/death-saves.svg\"\n              );\n              info1 = {\n                text: `${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}`,\n              };\n              break;\n            case \"inspiration\":\n              active = this.actor.system.attributes.inspiration\n                ? \" active\"\n                : \"\";\n              cssClass = `toggle${active}`;\n              img = coreModule.api.Utils.getImage(\n                \"modules/token-action-hud-crucible/icons/inspiration.svg\"\n              );\n              break;\n          }\n        } else {\n          const value = this.actor.getFlag(CUSTOM_crucible.ID, counter.key);\n          switch (counter.type) {\n            case \"checkbox\":\n              active = value ? \" active\" : \"\";\n              cssClass = `toggle${active}`;\n              break;\n            case \"fraction\":\n              active = value.value > 0 ? \" active\" : \"\";\n              cssClass = `toggle${active}`;\n              info1 = { text: `${value.value ?? 0}/${value.max ?? 0}` };\n              break;\n            case \"number\":\n              active = value > 0 ? \" active\" : \"\";\n              cssClass = `toggle${active}`;\n              info1 = { text: value };\n              break;\n            case \"successFailure\":\n              info1 = { text: `${value?.success ?? 0}/${value?.failure ?? 0}` };\n              break;\n          }\n        }\n\n        return {\n          id: counter.key,\n          name: counter.label,\n          listName: this.#getListName(actionType, counter.name),\n          cssClass,\n          img,\n          info1,\n          system: {\n            actionType,\n            counterKey: counter.key,\n            counterType: counter.type,\n          },\n        };\n      });\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"counters\" });\n    }\n\n    /**\n     * Build effects\n     * @private\n     */\n    async #buildEffects() {\n      const actionType = \"effect\";\n\n      // Get effects and exit if none exist\n      const effects = new Map(\n        this.actor.allApplicableEffects().map((effect) => [effect.id, effect])\n      );\n      if (effects.size === 0) return;\n\n      // Map passive and temporary effects to new maps\n      const passiveEffects = new Map();\n      const temporaryEffects = new Map();\n      const statusEffectIds = new Set(\n        CONFIG.statusEffects.map((statusEffect) => statusEffect._id)\n      );\n\n      // Iterate effects and add to a map based on the isTemporary value\n      for (const [effectId, effect] of effects.entries()) {\n        if (effect.isSuppressed) continue;\n        if (effect.parent?.system?.identified === false && !game.user.isGM)\n          continue;\n        if (statusEffectIds.has(effect.id)) continue;\n\n        if (effect.isTemporary) {\n          temporaryEffects.set(effectId, effect);\n        } else {\n          passiveEffects.set(effectId, effect);\n        }\n      }\n\n      // Build passive and temporary effects\n      await Promise.all([\n        this.buildActions({\n          groupData: { id: \"passive-effects\" },\n          actionData: passiveEffects,\n          actionType,\n        }),\n        this.buildActions({\n          groupData: { id: \"temporary-effects\" },\n          actionData: temporaryEffects,\n          actionType,\n        }),\n      ]);\n    }\n\n    /**\n     * Build exhaustion\n     * @private\n     */\n    #buildExhaustion() {\n      // Exit if every actor is not the character type\n      if (!this.actors.every((actor) => actor.type === \"character\")) return;\n\n      // Get actions\n      const actionType = \"exhaustion\";\n      const active =\n        this.actor.system.attributes.exhaustion > 0 ? \" active\" : \"\";\n      const actions = [\n        {\n          id: \"exhaustion\",\n          name: game.i18n.localize(\"crucible.Exhaustion\"),\n          cssClass: `toggle${active}`,\n          img: coreModule.api.Utils.getImage(\n            \"modules/token-action-hud-crucible/icons/exhaustion.svg\"\n          ),\n          info1: { text: this.actor.system.attributes.exhaustion },\n          listName: this.#getListName(actionType, name),\n          system: { actionType, actionId: \"exhaustion\" },\n        },\n      ];\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"exhaustion\" });\n    }\n\n    /**\n     * Build features\n     * @private\n     */\n    async #buildFeatures() {\n      // Filter feats from items and exit if none exist\n      const feats = new Map(\n        [...this.items].filter(([, value]) => value.type === \"feat\")\n      );\n      if (feats.size === 0) return;\n\n      // Map active and passive features to new maps\n      const featuresMap = new Map([\n        [\"activeFeatures\", new Map()],\n        [\"passiveFeatures\", new Map()],\n      ]);\n\n      const featureType = {\n        background: \"backgroundFeatures\",\n        class: \"classFeatures\",\n        monster: \"monsterFeatures\",\n        race: \"raceFeatures\",\n        feats: \"feats\",\n      };\n\n      const classFeatureType = {\n        artificerInfusion: \"artificerInfusions\",\n        channelDivinity: \"channelDivinity\",\n        defensiveTactic: \"defensiveTactics\",\n        eldritchInvocation: \"eldritchInvocations\",\n        elementalDiscipline: \"elementalDisciplines\",\n        fightingStyle: \"fightingStyles\",\n        huntersPrey: \"huntersPrey\",\n        ki: \"kiAbilities\",\n        maneuver: \"maneuvers\",\n        metamagic: \"metamagicOptions\",\n        multiattack: \"multiattacks\",\n        pact: \"pactBoons\",\n        psionicPower: \"psionicPowers\",\n        rune: \"runes\",\n        superiorHuntersDefense: \"superiorHuntersDefense\",\n      };\n\n      for (const [key, value] of feats) {\n        const activationType = value.system.activities.contents[0]?.type;\n        const type = value.system.type.value;\n        const subType = value.system.type?.subtype;\n\n        if (activationType) {\n          featuresMap.get(\"activeFeatures\").set(key, value);\n        } else {\n          featuresMap.get(\"passiveFeatures\").set(key, value);\n        }\n\n        // Map feature types\n        if (featureType[type]) {\n          if (!featuresMap.has(featureType[type]))\n            featuresMap.set(featureType[type], new Map());\n          featuresMap.get(featureType[type]).set(key, value);\n        }\n\n        // Map class feature subtypes\n        if (classFeatureType[subType]) {\n          if (!featuresMap.has(classFeatureType[subType]))\n            featuresMap.set(classFeatureType[subType], new Map());\n          featuresMap.get(classFeatureType[subType]).set(key, value);\n        }\n      }\n\n      // Loop through inventory groups ids\n      for (const id of FEATURE_GROUP_IDS) {\n        const actionData = featuresMap.get(id);\n        if (!actionData || actionData.size === 0) continue;\n\n        // Create group data\n        const groupData = {\n          id: GROUP[id].id,\n          name: game.i18n.localize(GROUP[id].name) ?? \"\",\n        };\n\n        // Build actions and activations\n        const actionType = \"feature\";\n        await this.buildActions({ groupData, actionData, actionType });\n        await this.buildActivations({ groupData, actionData, actionType });\n      }\n    }\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory() {\n      // Exit early if no items exist\n      if (this.items.size === 0) return;\n\n      // Initialize inventory map categories\n      const inventoryMap = new Map([\n        [\"equipped\", new Map()],\n        [\"unequipped\", new Map()],\n        [\"consumables\", new Map()],\n        [\"containers\", new Map()],\n        [\"equipment\", new Map()],\n        [\"loot\", new Map()],\n        [\"tools\", new Map()],\n        [\"weapons\", new Map()],\n      ]);\n\n      for (const [key, value] of this.items) {\n        // Set items into maps\n        if (value.system?.quantity > 0 && this.#isActiveItem(value)) {\n          if (value.system.equipped) {\n            inventoryMap.get(\"equipped\").set(key, value);\n          } else {\n            inventoryMap.get(\"unequipped\").set(key, value);\n          }\n\n          if (this.#isUsableItem(value) && value.type === \"consumable\")\n            inventoryMap.get(\"consumables\").set(key, value);\n          if (this.#isEquippedItem(value)) {\n            switch (value.type) {\n              case \"container\":\n                inventoryMap.get(\"containers\").set(key, value);\n                break;\n              case \"equipment\":\n                inventoryMap.get(\"equipment\").set(key, value);\n                break;\n              case \"loot\":\n                inventoryMap.get(\"loot\").set(key, value);\n                break;\n              case \"tool\":\n                inventoryMap.get(\"tools\").set(key, value);\n                break;\n              case \"weapon\":\n                inventoryMap.get(\"weapons\").set(key, value);\n                break;\n            }\n          }\n        }\n      }\n\n      // Loop through inventory subcateogry ids\n      for (const groupId of this.inventorygroupIds) {\n        const actionData = inventoryMap.get(groupId);\n        if (!actionData || actionData.size === 0) continue;\n\n        // Create group data\n        const groupData = {\n          id: groupId,\n          name: game.i18n.localize(GROUP[groupId].name),\n        };\n\n        const data = { groupData, actionData };\n\n        // Build actions and activations\n        await this.buildActions(data);\n        await this.buildActivations(data);\n      }\n    }\n\n    /**\n     * Build rests\n     * @private\n     */\n    #buildRests() {\n      // Exit if every actor is not the character type\n      if (\n        this.actors.length === 0 ||\n        !this.actors.every((actor) => actor.type === \"character\")\n      )\n        return;\n\n      // Get actions\n      const actionType = \"utility\";\n      const restTypes = {\n        shortRest: \"crucible.ShortRest\",\n        longRest: \"crucible.LongRest\",\n      };\n      const actions = Object.entries(restTypes).map(([id, name]) => {\n        name = game.i18n.localize(name);\n        return {\n          id,\n          name,\n          listName: this.#getListName(actionType, name),\n          system: { actionType, actionId: id },\n        };\n      });\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"rests\" });\n    }\n\n    /**\n     * Build skills\n     * @private\n     */\n    #buildSkills() {\n      // Get skills and exit if none exist\n      const skills = this.actor?.system.skills || CONFIG.crucible.skills;\n      if (skills.length === 0) return;\n\n      // Get actions\n      const actionType = \"skill\";\n      const actions = Object.entries(skills)\n        .map(([id, skill]) => {\n          try {\n            const name = CONFIG.crucible.skills[id].label;\n            return {\n              id,\n              name: this.abbreviateSkills ? Utils.capitalize(id) : name,\n              icon1: this.#getProficiencyIcon(skill.value),\n              info1: this.actor\n                ? { text: coreModule.api.Utils.getModifier(skill.total) }\n                : \"\",\n              listName: this.#getListName(actionType, name),\n              system: { actionType, actionId: id },\n            };\n          } catch (error) {\n            coreModule.api.Logger.error(skill);\n            return null;\n          }\n        })\n        .filter((skill) => !!skill);\n\n      // Add actions to HUD\n      this.addActions(actions, { id: \"skills\" });\n    }\n\n    /**\n     * Build spells\n     */\n    async #buildSpells() {\n      // Filter items for spells and exit if none exist\n      const spells = new Map(\n        [...this.items].filter(([, value]) => value.type === \"spell\")\n      );\n      if (spells.size === 0) return;\n\n      // Initialize spells map categories\n      const spellsMap = new Map([\n        [\"atWillSpells\", new Map()],\n        [\"innateSpells\", new Map()],\n        [\"pactSpells\", new Map()],\n        [\"cantrips\", new Map()],\n        [\"_1stLevelSpells\", new Map()],\n        [\"_2ndLevelSpells\", new Map()],\n        [\"_3rdLevelSpells\", new Map()],\n        [\"_4thLevelSpells\", new Map()],\n        [\"_5thLevelSpells\", new Map()],\n        [\"_6thLevelSpells\", new Map()],\n        [\"_7thLevelSpells\", new Map()],\n        [\"_8thLevelSpells\", new Map()],\n        [\"_9thLevelSpells\", new Map()],\n      ]);\n\n      // Loop through items\n      for (const [key, value] of spells) {\n        if (!this.#isUsableItem(value) || !this.#isUsableSpell(value)) continue;\n\n        switch (value.system.preparation.mode) {\n          case \"atwill\":\n            spellsMap.get(\"atWillSpells\").set(key, value);\n            break;\n          case \"innate\":\n            spellsMap.get(\"innateSpells\").set(key, value);\n            break;\n          case \"pact\":\n            spellsMap.get(\"pactSpells\").set(key, value);\n            break;\n          default: {\n            switch (value.system.level) {\n              case 0:\n                spellsMap.get(\"cantrips\").set(key, value);\n                break;\n              case 1:\n                spellsMap.get(\"_1stLevelSpells\").set(key, value);\n                break;\n              case 2:\n                spellsMap.get(\"_2ndLevelSpells\").set(key, value);\n                break;\n              case 3:\n                spellsMap.get(\"_3rdLevelSpells\").set(key, value);\n                break;\n              case 4:\n                spellsMap.get(\"_4thLevelSpells\").set(key, value);\n                break;\n              case 5:\n                spellsMap.get(\"_5thLevelSpells\").set(key, value);\n                break;\n              case 6:\n                spellsMap.get(\"_6thLevelSpells\").set(key, value);\n                break;\n              case 7:\n                spellsMap.get(\"_7thLevelSpells\").set(key, value);\n                break;\n              case 8:\n                spellsMap.get(\"_8thLevelSpells\").set(key, value);\n                break;\n              case 9:\n                spellsMap.get(\"_9thLevelSpells\").set(key, value);\n                break;\n            }\n          }\n        }\n      }\n\n      // Reverse sort spell slots by level\n      const systemSpells = Object.entries(this.actor.system.spells).reverse();\n\n      // Set spell slot availability\n      const spellSlotsMap = new Map();\n      let spellSlotAvailable = this.showUnchargedItems;\n      let pactSlotAvailable = this.showUnchargedItems;\n      let pactSlot = null;\n\n      for (const [key, value] of systemSpells) {\n        const hasValue = value.value > 0;\n        const hasMax = value.max > 0;\n        const hasLevel = value.level > 0;\n\n        if (key === \"pact\") {\n          pactSlotAvailable =\n            pactSlotAvailable || (hasValue && hasMax && hasLevel);\n          value.slotAvailable = pactSlotAvailable && hasLevel;\n          pactSlot = [key, value];\n        } else if (key.startsWith(\"spell\") && key !== \"spell0\") {\n          spellSlotAvailable = spellSlotAvailable || (hasValue && hasMax);\n          value.slotAvailable = spellSlotAvailable;\n          spellSlotsMap.set(key, value);\n        } else if (hasValue) {\n          value.slotsAvailable = true;\n          spellSlotsMap.set(key, value);\n        }\n      }\n\n      // Set equivalent spell slot where pact slot is available\n      if (pactSlot[1].slotAvailable) {\n        const spellSlot = spellSlotsMap.get(`spell${pactSlot[1].level}`);\n        spellSlot.slotsAvailable = true;\n      }\n\n      const spellSlotModes = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9, \"pact\"]);\n\n      for (const id of SPELL_GROUP_IDS) {\n        // Skip if no spells exist\n        if (!spellsMap.has(id)) continue;\n\n        const spellMode = GROUP[id].spellMode;\n        const levelInfo =\n          spellMode === \"pact\"\n            ? pactSlot[1]\n            : spellSlotsMap.get(`spell${spellMode}`);\n        const {\n          value: slots = 0,\n          max = 0,\n          slotAvailable = false,\n        } = levelInfo || {};\n\n        // Skip if spells require spell slots and none are available\n        if (!slotAvailable && spellSlotModes.has(spellMode)) continue;\n\n        // Create group data\n        const groupData = {\n          id: GROUP[id].id,\n          name: game.i18n.localize(GROUP[id].name),\n          info: {\n            info1: {\n              class: \"tah-spotlight\",\n              text: max > 0 ? `${slots}/${max}` : \"\",\n            },\n          },\n        };\n\n        // Add spell slot info to group\n        this.addGroupInfo(groupData);\n\n        const data = {\n          groupData,\n          actionData: spellsMap.get(id),\n          actionType: \"spell\",\n        };\n\n        // Build actions and activations\n        await this.buildActions(data);\n        await this.buildActivations(data);\n      }\n    }\n\n    /**\n     * Build utility\n     * @private\n     */\n    #buildUtility() {\n      // Exit if every actor is not the character type\n      if (this.actors.length === 0) return;\n      if (!this.actors.every((actor) => actor.type === \"character\")) return;\n\n      const actionType = \"utility\";\n\n      // Set utility types\n      const utilityTypes = {\n        deathSave: { name: game.i18n.localize(\"crucible.DeathSave\") },\n        inspiration: { name: game.i18n.localize(\"crucible.Inspiration\") },\n      };\n\n      // Delete 'deathSave' for multiple tokens\n      if (!this.actor || this.actor.system.attributes.hp.value > 0)\n        delete utilityTypes.deathSave;\n\n      // Get actions\n      const actions = Object.entries(utilityTypes).map((utilityType) => {\n        const id = utilityType[0];\n        const name = utilityType[1].name;\n        let cssClass = \"\";\n        if (utilityType[0] === \"inspiration\") {\n          const active = this.actors.every(\n            (actor) => actor.system.attributes?.inspiration\n          )\n            ? \" active\"\n            : \"\";\n          cssClass = `toggle${active}`;\n        }\n        return {\n          id,\n          name,\n          cssClass,\n          listName: this.#getListName(actionType, name),\n          system: { actionType, actionId: id },\n        };\n      });\n\n      // Crreate group data\n      const groupData = { id: \"utility\" };\n\n      // Add actions to HUD\n      this.addActions(actions, groupData);\n    }\n\n    /**\n     * Build actions\n     * @public\n     * @param {object} data actionData, groupData, actionType\n     * @param {object} options\n     */\n    async buildActions(data, options) {\n      const { actionData, groupData, actionType } = data;\n\n      // Exit if there is no action data\n      if (actionData.size === 0) return;\n\n      // Exit if there is no groupId\n      const groupId = typeof groupData === \"string\" ? groupData : groupData?.id;\n      if (!groupId) return;\n\n      // Get actions\n      const actions = await Promise.all(\n        [...actionData].map(\n          async (item) => await this.#getAction(item[1], actionType)\n        )\n      );\n\n      // Add actions to action list\n      this.addActions(actions, groupData);\n    }\n\n    /**\n     * Get action\n     * @private\n     * @param {object} entity      The entity\n     *  @param {string} actionType The action type\n     * @returns {object}           The action\n     */\n    async #getAction(entity, actionType = \"item\") {\n      const id = entity.id ?? entity._id;\n      let name = entity?.name ?? entity?.label;\n      let cssClass = \"\";\n      if (Object.hasOwn(entity, \"disabled\")) {\n        const active = !entity.disabled ? \" active\" : \"\";\n        cssClass = `toggle${active}`;\n      }\n      const info = this.#getItemInfo(entity);\n      const tooltip = await this.#getTooltip(\n        await this.#getTooltipData(entity)\n      );\n      return {\n        id,\n        name,\n        cssClass,\n        img: coreModule.api.Utils.getImage(entity),\n        icon1: this.#getActivationTypeIcon(\n          entity.system?.activities?.contents[0]?.activation.type\n        ),\n        icon2: this.#getPreparedIcon(entity),\n        icon3: this.#getConcentrationIcon(entity),\n        info1: info?.info1,\n        info2: info?.info2,\n        info3: info?.info3,\n        listName: this.#getListName(actionType, name),\n        tooltip,\n        system: { actionType, actionId: id },\n      };\n    }\n\n    /**\n     * Is active item\n     * @private\n     * @param {object} item The item\n     * @returns {boolean}   Whether the item is active\n     */\n    #isActiveItem(item) {\n      return false;\n      // if (this.showItemsWithoutActivationCosts) return true;\n      // const activationTypes = new Set(\n      //   Object.keys(CONFIG.crucible.activityActivationTypes).filter(\n      //     (activationType) => activationType !== \"none\"\n      //   )\n      // );\n      // const activationType =\n      //   item.system?.activities?.contents[0]?.activation?.type;\n      // return activationTypes.has(activationType) || item.type === \"tool\";\n    }\n\n    /**\n     * Is equipped item\n     * @private\n     * @param {object} item The item\n     * @returns {boolean}   Whether the item is equipped\n     */\n    #isEquippedItem(item) {\n      const excludedTypes = [\"consumable\", \"spell\", \"feat\"];\n      return (\n        (this.showUnequippedItems && !excludedTypes.includes(item.type)) ||\n        (item.system.equipped && item.type !== \"consumable\")\n      );\n    }\n\n    /**\n     * Is usable item\n     * @private\n     * @param {object} item The item\n     * @returns {boolean}   Whether the item is usable\n     */\n    #isUsableItem(item) {\n      return (\n        this.showUnchargedItems ||\n        !!item.system.uses?.value ||\n        !item.system.uses?.max\n      );\n    }\n\n    /**\n     * Is usable spell\n     * @private\n     * @param {object} spell The spell\n     * @returns {boolean}    Whether the spell is usable\n     */\n    #isUsableSpell(spell) {\n      if (this.actor?.type !== \"character\" && this.showUnequippedItems)\n        return true;\n      if (this.showUnpreparedSpells) return true;\n\n      const preparationModes = new Set(\n        Object.keys(CONFIG.crucible.spellPreparationModes).filter(\n          (preparationMode) => preparationMode !== \"prepared\"\n        )\n      );\n\n      // Return true if the spell has a preparation mode other than 'prepared' or is prepared\n      return (\n        preparationModes.has(spell.system.preparation.mode) ||\n        spell.system.preparation.prepared\n      );\n    }\n\n    #getListName(actionType, actionName) {\n      const prefix = `${game.i18n.localize(ACTION_TYPE[actionType])}: ` ?? \"\";\n      return `${prefix}${actionName}` ?? \"\";\n    }\n\n    /**\n     * Get item info\n     * @private\n     * @param {object} item\n     * @returns {object}\n     */\n    #getItemInfo(item) {\n      const info1 =\n        item.type === \"spell\"\n          ? this.#getSpellInfo(item)\n          : this.#getQuantityData(item);\n      const info2 = this.#getUsesData(item);\n      const info3 = this.#getConsumeData(item);\n\n      return { info1, info2, info3 };\n    }\n\n    /**\n     * Add spell info\n     * @private\n     * @param {object} spell The spell\n     * @returns {object}     The spell info\n     */\n    #getSpellInfo(spell) {\n      if (!this.displaySpellInfo) return null;\n\n      const components = spell.system?.properties;\n      if (!components) return null;\n\n      const info = { text: \"\", title: \"\" };\n      const componentTypes = {\n        vocal: \"crucible.ComponentVerbal\",\n        somatic: \"crucible.ComponentSomatic\",\n        material: \"crucible.ComponentMaterial\",\n      };\n\n      const componentsArray = Object.entries(componentTypes)\n        .filter(([key]) => components[key])\n        .map(([key, label]) => {\n          info.text += game.i18n.localize(`${label}Abbr`);\n          return game.i18n.localize(label);\n        });\n\n      // Ritual\n      if (components.ritual) {\n        componentsArray.push(`[${game.i18n.localize(\"crucible.Ritual\")}]`);\n        info.text += ` [${game.i18n.localize(\"crucible.RitualAbbr\")}]`;\n      }\n\n      info.title = componentsArray.join(\", \");\n\n      return info;\n    }\n\n    /**\n     * Get valid actors\n     * @private\n     * @returns {object}\n     */\n    #getValidActors() {\n      const allowedTypes = [\"character\", \"npc\"];\n      return this.actors.every((actor) => allowedTypes.includes(actor.type))\n        ? this.actors\n        : [];\n    }\n\n    /**\n     * Get valid tokens\n     * @private\n     * @returns {object}\n     */\n    #getValidTokens() {\n      const allowedTypes = [\"character\", \"npc\"];\n      return this.actors.every((actor) => allowedTypes.includes(actor.type))\n        ? this.tokens\n        : [];\n    }\n\n    /**\n     * Get quantity\n     * @private\n     * @param {object} item\n     * @returns {string}\n     */\n    #getQuantityData(item) {\n      const quantity = item?.system?.quantity ?? 0;\n      return {\n        text: quantity > 1 ? quantity : \"\",\n        title: `${game.i18n.localize(\"crucible.Quantity\")}: ${quantity}`,\n      };\n    }\n\n    /**\n     * Get uses\n     * @private\n     * @param {object} item\n     * @returns {string}\n     */\n    #getUsesData(item) {\n      const uses = item?.system?.uses;\n      if (!(uses?.max > 0)) return {};\n      const per =\n        uses.recovery[0]?.period === \"charges\"\n          ? \"\"\n          : ` ${game.i18n.localize(\"crucible.per\")} `;\n      const period =\n        CONFIG.crucible.limitedUsePeriods[uses.recovery[0]?.period]?.label ??\n        uses.recovery[0]?.period;\n      const perPeriod = period ? `${per}${period}` : \"\";\n      const remainingUses = uses.max - (uses.spent ?? 0);\n      const text = `${remainingUses}/${uses.max}`;\n      const title = `${text}${perPeriod}`;\n      return { text, title };\n    }\n\n    /**\n     * Get consume\n     * @private\n     * @param {object} item\n     * @returns {string}\n     */\n    #getConsumeData(item) {\n      // Get consume target and type\n      const firstActivity = item?.system?.activities?.contents[0];\n      const firstTarget = firstActivity?.consumption?.targets?.[0];\n      const consumeId = firstTarget?.target;\n      const consumeType = firstTarget?.type;\n      const consumeAmount = firstTarget?.value;\n\n      if (!consumeId || !consumeType || consumeId === item.id) return {};\n\n      // Return resources\n      if (consumeType === \"attribute\") {\n        const parentId = consumeId.substr(0, consumeId.lastIndexOf(\".\"));\n        const target = foundry.utils.getProperty(this.actor.system, parentId);\n\n        if (target) {\n          const text = `${target.value ?? \"0\"}${\n            target.max ? `/${target.max}` : \"\"\n          }`;\n          return {\n            text,\n            title: `${text} ${target.label ?? \"\"}`,\n          };\n        }\n      } else {\n        const target = this.actor.items?.get(consumeId);\n\n        // Return charges\n        if (target && consumeType === \"charges\") {\n          return this.#getUsesData(target);\n        }\n\n        // Return quantity\n        if (target?.system?.quantity) {\n          const text = `${\n            consumeAmount > 1\n              ? `${consumeAmount} ${game.i18n.localize(\"crucible.of\")} `\n              : \"\"\n          }${target.system.quantity}`;\n          return {\n            text,\n            title: `${text} ${target.name}`,\n          };\n        }\n      }\n\n      return {};\n    }\n\n    /**\n     * Discard slow items\n     * @private\n     * @param {Map} items The items\n     * @returns {Map}     The filtered items\n     */\n    #discardSlowItems(items) {\n      // Return all items if slow actions are allowed\n      if (Utils.getSetting(\"showSlowActions\")) return items;\n\n      // Define slow activation types\n      const slowActivationTypes = new Set([\"minute\", \"hour\", \"day\"]);\n\n      // Filter out slow items and return the result\n      return new Map(\n        [...items.entries()].filter(([_, item]) => {\n          const activationType = item.system?.activation?.type;\n          return !slowActivationTypes.has(activationType);\n        })\n      );\n    }\n\n    /**\n     * Get proficiency icon\n     * @param {string} level\n     * @returns {string}\n     */\n    #getProficiencyIcon(level) {\n      const title = CONFIG.crucible.proficiencyLevels[level] ?? \"\";\n      const icon = PROFICIENCY_LEVEL_ICON[level];\n      return icon ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\n    }\n\n    /**\n     * Get icon for the activation type\n     * @private\n     * @param {object} activationType The activation type\n     * @returns {string}              The icon\n     */\n    #getActivationTypeIcon(activationType) {\n      const title =\n        CONFIG.crucible.abilityActivationTypes[activationType] ?? \"\";\n      const icon = ACTIVATION_TYPE[activationType]?.icon;\n      return icon ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\n    }\n\n    /**\n     * Get icon for concentration type\n     * @private\n     * @param {object} spell\n     * @returns {string}\n     */\n    #getConcentrationIcon(spell) {\n      if (\n        spell?.type !== \"spell\" ||\n        !this.displaySpellInfo ||\n        !spell.system?.properties?.has(\"concentration\")\n      )\n        return null;\n      const title = game.i18n.localize(\"crucible.Scroll.RequiresConcentration\");\n      const icon = CONCENTRATION_ICON;\n      return `<crucible-icon src=\"${icon}\" title=\"${title}\">`;\n    }\n\n    /**\n     * Get icon for a prepared spell\n     * @private\n     * @param {object} spell\n     * @returns\n     */\n    #getPreparedIcon(spell) {\n      if (spell?.type !== \"spell\" || !this.showUnpreparedSpells) return null;\n      const level = spell.system.level;\n      const preparationMode = spell.system.preparation.mode;\n      const prepared = spell.system.preparation.prepared;\n      const icon = prepared\n        ? PREPARED_ICON\n        : `${PREPARED_ICON} tah-icon-disabled`;\n      const title =\n        preparationMode === \"always\"\n          ? game.i18n.localize(\"crucible.SpellPrepAlways\")\n          : prepared\n          ? game.i18n.localize(\"crucible.SpellPrepared\")\n          : game.i18n.localize(\"crucible.SpellUnprepared\");\n\n      // Return icon if the preparation mode is 'prepared' or 'always' and the spell is not a cantrip\n      return (preparationMode === \"prepared\" || preparationMode === \"always\") &&\n        level !== 0\n        ? `<i class=\"${icon}\" title=\"${title}\"></i>`\n        : null;\n    }\n\n    async #getTooltipData(entity) {\n      if (this.tooltipsSetting === \"none\") return \"\";\n\n      const name = entity?.name ?? \"\";\n\n      if (this.tooltipsSetting === \"nameOnly\") return name;\n\n      const unidentified = entity.system?.identified === false;\n      const description =\n        typeof entity?.system?.description === \"string\"\n          ? entity?.system?.description\n          : (unidentified\n              ? entity?.system?.unidentified?.description\n              : entity?.system?.description?.value) ?? \"\";\n      let modifiers;\n      let properties;\n      let rarity;\n      let traits;\n      if (!unidentified) {\n        modifiers = entity?.modifiers ?? null;\n        properties = [\n          ...(entity.system?.chatProperties ?? []),\n          ...(entity.system?.equippableItemCardProperties ?? []),\n          entity.system?.parent?.labels?.activation,\n          entity.system?.parent?.labels?.target,\n          entity.system?.parent?.labels?.range,\n          entity.system?.parent?.labels?.duration,\n        ].filter((p) => p);\n        rarity = unidentified ? null : entity?.rarity ?? null;\n        traits =\n          entity?.type === \"weapon\"\n            ? this.#getWeaponProperties(entity?.system?.properties)\n            : null;\n      }\n      return { name, description, modifiers, properties, rarity, traits };\n    }\n\n    /**\n     * Get condition tooltip data\n     * @param {*} id     The condition id\n     * @param {*} label   The condition label\n     * @returns {object} The tooltip data\n     */\n    async #getConditionTooltipData(id, label) {\n      if (this.tooltipsSetting === \"none\") return \"\";\n\n      const condition = CONFIG.statusEffects.find((s) => s.id === id);\n\n      if (this.tooltipsSetting === \"nameOnly\" || !condition) return label;\n\n      const journalEntry = condition.reference\n        ? await fromUuid(condition.reference)\n        : null;\n      const description = journalEntry?.text?.content ?? \"\";\n      const relativeTo = journalEntry;\n      return {\n        label,\n        description,\n        relativeTo,\n      };\n    }\n\n    /**\n     * Get tooltip\n     * @param {object} tooltipData The tooltip data\n     * @returns {string}           The tooltip\n     */\n    async #getTooltip(tooltipData) {\n      if (this.tooltipsSetting === \"none\") return \"\";\n      if (typeof tooltipData === \"string\") return tooltipData;\n\n      const name = game.i18n.localize(tooltipData.name);\n\n      if (this.tooltipsSetting === \"nameOnly\") return name;\n\n      const nameHtml = `<h3>${name}</h3>`;\n\n      const relativeTo = tooltipData.relativeTo ?? this.actor;\n\n      const description =\n        tooltipData?.descriptionLocalised ??\n        (await TextEditor.enrichHTML(\n          game.i18n.localize(tooltipData?.description ?? \"\"),\n          { async: true, relativeTo, secrets: true }\n        ));\n\n      const rarityHtml = tooltipData?.rarity\n        ? `<span class=\"tah-tag ${tooltipData.rarity}\">${game.i18n.localize(\n            RARITY[tooltipData.rarity]\n          )}</span>`\n        : \"\";\n\n      const propertiesHtml = tooltipData?.properties\n        ? `<div class=\"tah-properties\">${tooltipData.properties\n            .map(\n              (property) =>\n                `<span class=\"tah-property\">${game.i18n.localize(\n                  property\n                )}</span>`\n            )\n            .join(\"\")}</div>`\n        : \"\";\n\n      const traitsHtml = tooltipData?.traits\n        ? tooltipData.traits\n            .map(\n              (trait) =>\n                `<span class=\"tah-tag\">${game.i18n.localize(\n                  trait.label ?? trait\n                )}</span>`\n            )\n            .join(\"\")\n        : \"\";\n\n      const traits2Html = tooltipData?.traits2\n        ? tooltipData.traits2\n            .map(\n              (trait) =>\n                `<span class=\"tah-tag tah-tag-secondary\">${game.i18n.localize(\n                  trait.label ?? trait\n                )}</span>`\n            )\n            .join(\"\")\n        : \"\";\n\n      const traitsAltHtml = tooltipData?.traitsAlt\n        ? tooltipData.traitsAlt\n            .map(\n              (trait) =>\n                `<span class=\"tah-tag tah-tag-alt\">${game.i18n.localize(\n                  trait.label\n                )}</span>`\n            )\n            .join(\"\")\n        : \"\";\n\n      const modifiersHtml = tooltipData?.modifiers\n        ? `<div class=\"tah-tags\">${tooltipData.modifiers\n            .filter((modifier) => modifier.enabled)\n            .map((modifier) => {\n              const label = game.i18n.localize(modifier.label);\n              const sign = modifier.modifier >= 0 ? \"+\" : \"\";\n              const mod = `${sign}${modifier.modifier ?? \"\"}`;\n              return `<span class=\"tah-tag tah-tag-transparent\">${label} ${mod}</span>`;\n            })\n            .join(\"\")}</div>`\n        : \"\";\n\n      const tagsJoined = [\n        rarityHtml,\n        traitsHtml,\n        traits2Html,\n        traitsAltHtml,\n      ].join(\"\");\n\n      const tagsHtml = tagsJoined\n        ? `<div class=\"tah-tags\">${tagsJoined}</div>`\n        : \"\";\n\n      const headerTags =\n        tagsHtml || modifiersHtml\n          ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>`\n          : \"\";\n\n      if (!description && !tagsHtml && !modifiersHtml) return name;\n\n      return `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`;\n    }\n\n    #getWeaponProperties(weaponProperties) {\n      if (!weaponProperties) return null;\n      return Object.entries(weaponProperties)\n        .filter(\n          ([id, selected]) =>\n            selected && CONFIG.crucible.validProperties.weapon.has(id)\n        )\n        .map(([id, _]) =>\n          game.i18n.localize(CONFIG.crucible.itemProperties[id])\n        );\n    }\n  };\n});\n","import { GROUP } from \"./constants.js\";\n\n/**\n * Default categories and groups\n */\nexport let DEFAULTS = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  const groups = GROUP;\n  Object.values(groups).forEach((group) => {\n    group.name = coreModule.api.Utils.i18n(group.name);\n    group.listName = `Group: ${coreModule.api.Utils.i18n(group.name)}`;\n  });\n  const groupsArray = Object.values(groups);\n  DEFAULTS = {\n    layout: [\n      {\n        nestId: \"actions\",\n        id: \"actions\",\n        name: coreModule.api.Utils.i18n(\"ACTOR.TABS.ACTIONS\"),\n        groups: [{ ...groups.actions, nestId: \"actions_actions\" }],\n      },\n      {\n        nestId: \"inventory\",\n        id: \"inventory\",\n        name: coreModule.api.Utils.i18n(\"ACTOR.TABS.INVENTORY\"),\n        groups: [\n          { ...groups.weapons, nestId: \"inventory_weapons\" },\n          { ...groups.equipment, nestId: \"inventory_equipment\" },\n          { ...groups.consumables, nestId: \"inventory_consumables\" },\n          { ...groups.tools, nestId: \"inventory_tools\" },\n          { ...groups.containers, nestId: \"inventory_containers\" },\n          { ...groups.loot, nestId: \"inventory_loot\" },\n        ],\n      },\n      {\n        nestId: \"features\",\n        id: \"features\",\n        name: coreModule.api.Utils.i18n(\"ACTOR.TABS.SKILLS\"),\n        groups: [\n          { ...groups.activeFeatures, nestId: \"features_active-features\" },\n          { ...groups.passiveFeatures, nestId: \"features_passive-features\" },\n        ],\n      },\n      {\n        nestId: \"spells\",\n        id: \"spells\",\n        name: coreModule.api.Utils.i18n(\"TYPES.Item.spellPl\"),\n        groups: [\n          { ...groups.atWillSpells, nestId: \"spells_at-will-spells\" },\n          { ...groups.innateSpells, nestId: \"spells_innate-spells\" },\n          { ...groups.pactSpells, nestId: \"spells_pact-spells\" },\n          { ...groups.cantrips, nestId: \"spells_cantrips\" },\n          { ...groups._1stLevelSpells, nestId: \"spells_1st-level-spells\" },\n          { ...groups._2ndLevelSpells, nestId: \"spells_2nd-level-spells\" },\n          { ...groups._3rdLevelSpells, nestId: \"spells_3rd-level-spells\" },\n          { ...groups._4thLevelSpells, nestId: \"spells_4th-level-spells\" },\n          { ...groups._5thLevelSpells, nestId: \"spells_5th-level-spells\" },\n          { ...groups._6thLevelSpells, nestId: \"spells_6th-level-spells\" },\n          { ...groups._7thLevelSpells, nestId: \"spells_7th-level-spells\" },\n          { ...groups._8thLevelSpells, nestId: \"spells_8th-level-spells\" },\n          { ...groups._9thLevelSpells, nestId: \"spells_9th-level-spells\" },\n        ],\n      },\n      {\n        nestId: \"attributes\",\n        id: \"attributes\",\n        name: coreModule.api.Utils.i18n(\"ACTOR.TABS.ATTRIBUTES\"),\n        groups: [\n          { ...groups.abilities, nestId: \"attributes_abilities\" },\n          { ...groups.skills, nestId: \"attributes_skills\" },\n        ],\n      },\n      {\n        nestId: \"effects\",\n        id: \"effects\",\n        name: coreModule.api.Utils.i18n(\"ACTOR.TABS.EFFECTS\"),\n        groups: [\n          { ...groups.temporaryEffects, nestId: \"effects_temporary-effects\" },\n          { ...groups.passiveEffects, nestId: \"effects_passive-effects\" },\n          { ...groups.conditions, nestId: \"effects_conditions\" },\n        ],\n      },\n      {\n        nestId: \"utility\",\n        id: \"utility\",\n        name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\n        groups: [\n          { ...groups.combat, nestId: \"utility_combat\" },\n          { ...groups.token, nestId: \"utility_token\" },\n          { ...groups.rests, nestId: \"utility_rests\" },\n          { ...groups.utility, nestId: \"utility_utility\" },\n        ],\n      },\n    ],\n    groups: groupsArray,\n  };\n});\n","import { CUSTOM_crucible } from \"./constants.js\";\n\nexport let RollHandler = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * @override\n     * @param {object} event\n     */\n    async handleActionClick(event) {\n      const { actionType, actionId } = this.action.system;\n\n      if (!this.actor) {\n        for (const token of coreModule.api.Utils.getControlledTokens()) {\n          const actor = token.actor;\n          await this.handleAction(event, actionType, actor, token, actionId);\n        }\n      } else {\n        await this.handleAction(\n          event,\n          actionType,\n          this.actor,\n          this.token,\n          actionId\n        );\n      }\n    }\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event\n     * @param {string} actionType\n     * @param {object} actor\n     * @param {object} token\n     * @param {string} actionId\n     */\n    async handleAction(event, actionType, actor, token, actionId) {\n      switch (actionType) {\n        case \"action\":\n          actor.actions[actionId].use();\n          break;\n        case \"ability\":\n          this.rollAbility(event, actor, actionId);\n          break;\n        case \"check\":\n          this.rollAbilityTest(event, actor, actionId);\n          break;\n        case \"save\":\n          this.rollAbilitySave(event, actor, actionId);\n          break;\n        case \"condition\":\n          if (!token) return;\n          await this.toggleCondition(actor, token, actionId);\n          break;\n        case \"counter\":\n          await this.modifyCounter(event, actor);\n          break;\n        case \"effect\":\n          await this.toggleEffect(actor, actionId);\n          break;\n        case \"exhaustion\":\n          await this.modifyExhaustion(event, actor);\n          break;\n        case \"feature\":\n        case \"item\":\n        case \"spell\":\n        case \"weapon\":\n          if (this.isRenderItem()) this.renderItem(actor, actionId);\n          else this.useItem(event, actor, actionId);\n          break;\n        case \"magicItem\":\n          await this.rollMagicItem(actor, actionId);\n          break;\n        case \"skill\":\n          this.rollSkill(event, actor, actionId);\n          break;\n        case \"utility\":\n          await this.performUtilityAction(event, actor, token, actionId);\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * Modify Counter\n     * @private\n     * @param {object} event The event\n     * @param {object} actor The actor\n     */\n    async modifyCounter(event, actor) {\n      switch (this.action?.system?.counterKey) {\n        case \"death-saves\":\n          this.rollDeathSave(event, actor);\n          break;\n        case \"exhaustion\":\n          await this.modifyExhaustion(actor);\n          break;\n        case \"inspiration\":\n          await this.modifyInspiration(actor);\n          break;\n        default:\n          await this.modifyCustomCounter(actor);\n          break;\n      }\n    }\n\n    /**\n     * Modify Exhaustion\n     * @private\n     * @param {object} actor The actor\n     */\n    async modifyExhaustion(actor) {\n      const currentExhaustion = actor.system.attributes.exhaustion;\n      const newExhaustion = currentExhaustion + (this.isRightClick ? -1 : 1);\n      if (newExhaustion >= 0 && newExhaustion !== currentExhaustion) {\n        actor.update({ \"system.attributes.exhaustion\": newExhaustion });\n      }\n    }\n\n    /**\n     * Modify Inspiration\n     * @private\n     * @param {object} actor The actor\n     */\n    async modifyInspiration(actor) {\n      const update = !actor.system.attributes.inspiration;\n      actor.update({ \"system.attributes.inspiration\": update });\n    }\n\n    /**\n     * Modify Custom Counter\n     * @private\n     * @param {object} actor The actor\n     */\n    async modifyCustomCounter(actor) {\n      const { counterKey, counterType } = this.action.system;\n\n      let value = actor.getFlag(CUSTOM_crucible.ID, counterKey) || {};\n\n      const setFlag = async (key, currentValue, newValue) => {\n        if (newValue !== currentValue) {\n          await actor.setFlag(CUSTOM_crucible.ID, key, newValue);\n        }\n      };\n\n      const adjustValue = (key, currentValue = 0, increment = 1) => {\n        const newValue = this.isRightClick\n          ? Math.max(0, currentValue - increment)\n          : currentValue + increment;\n        setFlag(key, currentValue, newValue);\n      };\n\n      switch (counterType) {\n        case \"checkbox\":\n          await setFlag(id, !value);\n          break;\n\n        case \"fraction\":\n          if (\n            this.isRightClick ||\n            (value.max && value.value < value.max) ||\n            !value.max\n          ) {\n            adjustValue(`${id}.value`, value.value);\n          }\n          break;\n\n        case \"number\":\n          adjustValue(id, value);\n          break;\n\n        case \"successFailure\":\n          value.success = value?.success ?? 0;\n          value.failure = value?.failure ?? 0;\n          if (this.isCtrl) {\n            adjustValue(`${id}.failure`, value.failure);\n          } else {\n            adjustValue(`${id}.success`, value.success);\n          }\n      }\n    }\n\n    /**\n     * Roll Ability\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    rollAbility(event, actor, actionId) {\n      if (!actor.system?.abilities) return;\n      actor.rollAbility(actionId, { event });\n    }\n\n    /**\n     * Roll Ability Save\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    rollAbilitySave(event, actor, actionId) {\n      if (!actor.system?.abilities) return;\n      actor.rollAbilitySave(actionId, { event });\n    }\n\n    /**\n     * Roll Ability Test\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    rollAbilityTest(event, actor, actionId) {\n      if (!actor.system?.abilities) return;\n      actor.rollAbilityTest(actionId, { event });\n    }\n\n    /**\n     * Roll Death Save\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     */\n    rollDeathSave(event, actor) {\n      actor.rollDeathSave({ event });\n    }\n\n    /**\n     * Roll Magic Item\n     * @private\n     * @param {object} actor    The actor\n     */\n    async rollMagicItem(actor) {\n      const { itemId, effectId } = this.action.system;\n\n      const magicItemActor = await MagicItems.actor(actor.id);\n      if (!magicItemActor) return;\n\n      // Magicitems module 3.0.0 does not support Item5e#use\n      magicItemActor.roll(itemId, effectId);\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\n    }\n\n    /**\n     * Roll Skill\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    rollSkill(event, actor, actionId) {\n      if (!actor.system?.skills) return;\n      actor.rollSkill(actionId, { event });\n    }\n\n    /**\n     * Use Item\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    useItem(event, actor, actionId) {\n      const item = coreModule.api.Utils.getItem(actor, actionId);\n\n      if (this.#needsRecharge(item)) {\n        item.rollRecharge();\n      } else {\n        item.use({ event, legacy: false });\n      }\n    }\n\n    /**\n     * Needs Recharge\n     * @private\n     * @param {object} item\n     * @returns {boolean}\n     */\n    #needsRecharge(item) {\n      return (\n        item?.system?.uses?.period === \"recharge\" &&\n        !(item?.system?.uses?.value > 0)\n      );\n    }\n\n    /**\n     * Perform utility action\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async performUtilityAction(event, actor, token, actionId) {\n      switch (actionId) {\n        case \"deathSave\":\n          this.rollDeathSave(event, actor);\n          break;\n        case \"endTurn\":\n          if (!token || game.combat?.current?.tokenId !== token.id) break;\n          await game.combat?.nextTurn();\n          break;\n        case \"initiative\":\n          await this.rollInitiative(actor);\n          break;\n        case \"inspiration\":\n          await this.modifyInspiration(actor);\n          break;\n        case \"longRest\":\n          actor.longRest();\n          break;\n        case \"shortRest\":\n          actor.shortRest();\n          break;\n      }\n\n      // Update HUD\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\n    }\n\n    /**\n     * Roll Initiative\n     * @param {object} actor The actor\n     * @private\n     */\n    async rollInitiative(actor) {\n      if (!actor) return;\n      await actor.rollInitiative({ createCombatants: true });\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\n    }\n\n    /**\n     * Toggle Condition\n     * @private\n     * @param {object} actor    The actor\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async toggleCondition(actor, token, actionId) {\n      if (!token) return;\n\n      const statusEffect = CONFIG.statusEffects.find(\n        (statusEffect) => statusEffect.id === actionId\n      );\n      const isConvenient =\n        statusEffect?.flags?.[\"dfreds-convenient-effects\"]?.isConvenient ??\n        actionId.startsWith(\"Convenient Effect\");\n\n      if (game.dfreds && isConvenient) {\n        const effectName = statusEffect.name ?? statusEffect.label;\n        await game.dfreds.effectInterface.toggleEffect(effectName, {\n          overlay: !!this.isRightClick,\n        });\n      } else {\n        const condition = this.#findCondition(actionId);\n        if (!condition) return;\n\n        const effect = this.#findEffect(actor, actionId);\n        if (effect?.disabled) {\n          await effect.delete();\n        }\n\n        await actor.toggleStatusEffect(condition.id, {\n          active: effect?.disabled ?? true,\n          overlay: !!this.isRightClick,\n        });\n      }\n\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\n    }\n\n    /**\n     * Find condition\n     * @private\n     * @param {string} actionId The action id\n     * @returns {object}        The condition\n     */\n    #findCondition(actionId) {\n      return CONFIG.statusEffects.find((effect) => effect.id === actionId);\n    }\n\n    /**\n     * Find effect\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     * @returns {object}        The effect\n     */\n    #findEffect(actor, actionId) {\n      return actor.effects.find((effect) =>\n        effect.statuses.every((status) => status === actionId)\n      );\n    }\n\n    /**\n     * Toggle Effect\n     * @private\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    async toggleEffect(actor, actionId) {\n      const effect = actor\n        .allApplicableEffects()\n        .find((effect) => effect.id === actionId);\n      if (!effect) return;\n\n      if (this.isRightClick && !effect.transfer) {\n        await effect.delete();\n      } else {\n        await effect.update({ disabled: !effect.disabled });\n      }\n\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\n    }\n\n    /**\n     * Handle action hover\n     * @override\n     * @param {object} event\n     */\n    async handleActionHover(event) {\n      const types = [\"feature\", \"item\", \"spell\", \"weapon\", \"magicItem\"];\n      const { actionType, actionId } = this.action.system;\n\n      if (!types.includes(actionType)) return;\n\n      const item = coreModule.api.Utils.getItem(this.actor, actionId);\n\n      if (this.isHover) {\n        Hooks.call(\"tokenActionHudSystemActionHoverOn\", event, item);\n      } else {\n        Hooks.call(\"tokenActionHudSystemActionHoverOff\", event, item);\n      }\n    }\n  };\n});\n","import { MODULE } from \"./constants.js\";\n\n/**\n *\n * @param updateFunc\n */\nexport function register(updateFunc) {\n  game.settings.register(MODULE.ID, \"abbreviateSkills\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.abbreviateSkills.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.abbreviateSkills.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showSlowActions\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showSlowActions.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showSlowActions.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"displaySpellInfo\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.displaySpellInfo.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.displaySpellInfo.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showUnchargedItems\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnchargedItems.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnchargedItems.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showUnequippedItems\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnequippedItems.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnequippedItems.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showUnequippedItemsNpcs\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnequippedItemsNpcs.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnequippedItemsNpcs.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showUnpreparedSpells\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnpreparedSpells.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showUnpreparedSpells.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n\n  game.settings.register(MODULE.ID, \"showItemsWithoutActivationCosts\", {\n    name: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showItemsWithoutActivationCosts.name\"\n    ),\n    hint: game.i18n.localize(\n      \"tokenActionHud.crucible.settings.showItemsWithoutActivationCosts.hint\"\n    ),\n    scope: \"client\",\n    config: true,\n    type: Boolean,\n    default: false,\n    onChange: (value) => {\n      updateFunc(value);\n    },\n  });\n}\n","// System Module Imports\nimport { ActionHandler } from \"./action-handler.js\";\nimport { RollHandler as Core } from \"./roll-handler.js\";\nimport { DEFAULTS } from \"./defaults.js\";\nimport * as systemSettings from \"./settings.js\";\n\nexport let SystemManager = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /** @override */\n    getActionHandler() {\n      const actionHandler = new ActionHandler();\n      return actionHandler;\n    }\n\n    /** @override */\n    getAvailableRollHandlers() {\n      let coreTitle = \"Core Crucible\";\n\n      const choices = { core: coreTitle };\n      return choices;\n    }\n\n    /** @override */\n    getRollHandler(rollHandlerId) {\n      let rollHandler;\n      switch (rollHandlerId) {\n        case \"core\":\n        default:\n          rollHandler = new Core();\n          break;\n      }\n\n      return rollHandler;\n    }\n\n    /** @override */\n    registerSettings(onChangeFunction) {\n      systemSettings.register(onChangeFunction);\n    }\n\n    /** @override */\n    async registerDefaults() {\n      const defaults = DEFAULTS;\n      return defaults;\n    }\n  };\n});\n","import { SystemManager } from \"./system-manager.js\";\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from \"./constants.js\";\n\nHooks.on(\"tokenActionHudCoreApiReady\", async () => {\n  const module = game.modules.get(MODULE.ID);\n  module.api = {\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n    SystemManager\n  };\n  Hooks.call(\"tokenActionHudSystemReady\", module);\n});\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","actions","ability","check","condition","counter","effect","exhaustion","feature","item","save","skill","spell","utility","ACTIVATION_TYPE","action","group","bonus","icon","crew","day","hour","lair","minute","legendary","reaction","reactiondamage","reactionmanual","special","other","CONCENTRATION_ICON","CUSTOM_crucible","COUNTERS","character","npc","FEATURE_GROUP_IDS","GROUP","_1stLevelSpells","id","name","spellMode","type","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","abilities","activeFeatures","artificerInfusions","atWillSpells","backgroundFeatures","bonusActions","cantrips","channelDivinity","checks","classFeatures","combat","conditions","consumables","containers","counters","crewActions","defensiveTactics","eldritchInvocations","elementalDisciplines","equipment","equipped","feats","fightingStyles","huntersPrey","innateSpells","kiAbilities","lairActions","legendaryActions","loot","maneuvers","metamagicOptions","monsterFeatures","multiattacks","otherActions","pactBoons","pactSpells","passiveEffects","passiveFeatures","psionicPowers","raceFeatures","reactions","rests","runes","saves","skills","superiorHuntersDefense","temporaryEffects","token","tools","unequipped","weapons","PREPARED_ICON","PROFICIENCY_LEVEL_ICON","RARITY","common","uncommon","rare","veryRare","artifact","RITUAL_ICON","SPELL_GROUP_IDS","Utils","Hooks","once","async","capitalize","value","replace","text","charAt","toUpperCase","substring","toLowerCase","getSetting","key","defaultValue","game","settings","get","coreModule","api","Logger","debug","setSetting","set","ActionHandler","featureActions","inventoryActions","spellActions","buildSystemActions","groupIds","this","actors","actor","getValidActors","tokens","getValidTokens","items","sortItemsByName","discardSlowItems","abbreviateSkills","displaySpellInfo","showItemsWithoutActivationCosts","showUnchargedItems","showUnequippedItems","showUnpreparedSpells","activationgroupIds","inventorygroupIds","buildCharacterActions","buildVehicleActions","buildMultipleTokenActions","Promise","all","buildConditions","buildBasicActions","buildCombat","buildUtility","buildEffects","buildFeatures","buildInventory","buildAbilities","buildRests","buildSkills","actionType","groupId","system","CONFIG","crucible","length","Object","entries","filter","map","abilityId","label","mod","icon1","getProficiencyIcon","proficient","info1","getModifier","title","i18n","localize","info2","listName","getListName","actionId","addActions","buildActivations","data","groupData","actionData","activationItems","Map","activationType","activities","contents","activation","has","values","groupDataClone","includes","defaultSelected","parentgroupData","addGroup","addGroupInfo","buildActions","combatType","initiative","current","tokenId","endTurn","getControlledTokens","tokenIds","combatants","combatant","getInfo1","class","cssClass","every","actorActions","statusEffects","hasCondition","effects","some","statuses","status","disabled","img","getImage","tooltip","getTooltip","getConditionTooltipData","buildCounters","isModuleActive","keys","_","visible","active","attributes","death","success","failure","inspiration","getFlag","max","counterKey","counterType","allApplicableEffects","size","statusEffectIds","Set","statusEffect","_id","effectId","isSuppressed","parent","identified","user","isGM","isTemporary","buildExhaustion","featuresMap","featureType","background","monster","race","classFeatureType","artificerInfusion","defensiveTactic","eldritchInvocation","elementalDiscipline","fightingStyle","ki","maneuver","metamagic","multiattack","pact","psionicPower","rune","subType","subtype","inventoryMap","quantity","isActiveItem","isUsableItem","isEquippedItem","shortRest","longRest","total","error","buildSpells","spells","spellsMap","isUsableSpell","preparation","mode","level","systemSpells","reverse","spellSlotsMap","spellSlotAvailable","pactSlotAvailable","pactSlot","hasValue","hasMax","hasLevel","slotAvailable","startsWith","slotsAvailable","spellSlotModes","levelInfo","slots","info","utilityTypes","deathSave","hp","utilityType","options","getAction","entity","hasOwn","getItemInfo","getTooltipData","getActivationTypeIcon","icon2","getPreparedIcon","icon3","getConcentrationIcon","info3","uses","spellPreparationModes","preparationMode","prepared","actionName","getSpellInfo","getQuantityData","getUsesData","getConsumeData","components","properties","componentsArray","vocal","somatic","material","ritual","push","join","allowedTypes","per","recovery","period","limitedUsePeriods","perPeriod","spent","firstActivity","firstTarget","consumption","targets","consumeId","target","consumeType","consumeAmount","parentId","substr","lastIndexOf","foundry","utils","getProperty","slowActivationTypes","proficiencyLevels","abilityActivationTypes","tooltipsSetting","unidentified","description","modifiers","rarity","traits","chatProperties","equippableItemCardProperties","labels","range","duration","p","getWeaponProperties","find","s","journalEntry","reference","fromUuid","content","relativeTo","tooltipData","nameHtml","descriptionLocalised","TextEditor","enrichHTML","secrets","rarityHtml","propertiesHtml","property","traitsHtml","trait","traits2Html","traits2","traitsAltHtml","traitsAlt","modifiersHtml","modifier","enabled","tagsJoined","tagsHtml","weaponProperties","selected","validProperties","weapon","itemProperties","DEFAULTS","groups","forEach","groupsArray","layout","nestId","RollHandler","register","updateFunc","hint","scope","config","Boolean","default","onChange","handleActionClick","event","handleAction","use","rollAbility","rollAbilityTest","rollAbilitySave","toggleCondition","modifyCounter","toggleEffect","modifyExhaustion","isRenderItem","renderItem","useItem","rollMagicItem","rollSkill","performUtilityAction","rollDeathSave","modifyInspiration","modifyCustomCounter","currentExhaustion","newExhaustion","isRightClick","update","setFlag","currentValue","newValue","adjustValue","increment","Math","isCtrl","itemId","magicItemActor","MagicItems","roll","callAll","getItem","needsRecharge","rollRecharge","legacy","nextTurn","rollInitiative","createCombatants","isConvenient","flags","dfreds","effectName","effectInterface","overlay","findCondition","findEffect","delete","toggleStatusEffect","transfer","handleActionHover","isHover","call","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","on","module","modules","requiredCoreModuleVersion"],"mappings":"AAGY,MAACA,EAAS,CACpBC,GAAI,6BAMOC,EAAc,CACzBD,GAAI,yBAMOE,EAA+B,MAK/BC,EAAc,CACzBC,QAAS,UACTC,QAAS,mBACTC,MAAO,gCACPC,UAAW,oCACXC,QAAS,kCACTC,OAAQ,kBACRC,WAAY,sBACZC,QAAS,kBACTC,KAAM,+BACNC,KAAM,0BACNC,MAAO,gCACPC,MAAO,mBACPC,QAAS,uBAMEC,EAAkB,CAC7BC,OAAQ,CAAEC,MAAO,WACjBC,MAAO,CAAED,MAAO,gBAAiBE,KAAM,eACvCC,KAAM,CAAEH,MAAO,eAAgBE,KAAM,gBACrCE,IAAK,CAAEF,KAAM,wBACbG,KAAM,CAAEH,KAAM,yBACdI,KAAM,CAAEN,MAAO,eAAgBE,KAAM,eACrCK,OAAQ,CAAEL,KAAM,0BAChBM,UAAW,CAAER,MAAO,oBAAqBE,KAAM,qBAC/CO,SAAU,CAAET,MAAO,YAAaE,KAAM,eACtCQ,eAAgB,CAAEV,MAAO,YAAaE,KAAM,eAC5CS,eAAgB,CAAEX,MAAO,YAAaE,KAAM,eAC5CU,QAAS,CAAEZ,MAAO,kBAAmBE,KAAM,eAC3CW,MAAO,CAAEb,MAAO,kBAMLc,EACX,wDAEWC,EAAkB,CAC7BlC,GAAI,kBACJmC,SAAU,CACRC,UAAW,qBACXjB,MAAO,iBACPkB,IAAK,iBAOIC,EAAoB,CAC/B,iBACA,kBACA,qBACA,gBACA,QACA,kBACA,eACA,qBACA,kBACA,mBACA,sBACA,uBACA,iBACA,cACA,cACA,YACA,mBACA,eACA,YACA,gBACA,QACA,0BAMWC,EAAQ,CACnBC,gBAAiB,CACfC,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERC,gBAAiB,CACfJ,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERE,gBAAiB,CACfL,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERG,gBAAiB,CACfN,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERI,gBAAiB,CACfP,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERK,gBAAiB,CACfR,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERM,gBAAiB,CACfT,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERO,gBAAiB,CACfV,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERQ,gBAAiB,CACfX,GAAI,mBACJC,KAAM,yCACNC,UAAW,EACXC,KAAM,UAERS,UAAW,CACTZ,GAAI,YACJC,KAAM,oCACNE,KAAM,UAERxC,QAAS,CACPqC,GAAI,UACJC,KAAM,kCACNE,KAAM,UAERU,eAAgB,CACdb,GAAI,kBACJC,KAAM,yCACNE,KAAM,UAERW,mBAAoB,CAClBd,GAAI,sBACJC,KAAM,6CACNE,KAAM,UAERY,aAAc,CACZf,GAAI,iBACJC,KAAM,uCACNC,UAAW,SACXC,KAAM,UAERa,mBAAoB,CAClBhB,GAAI,sBACJC,KAAM,6CACNE,KAAM,UAERc,aAAc,CACZjB,GAAI,gBACJC,KAAM,uCACNE,KAAM,UAERe,SAAU,CACRlB,GAAI,WACJC,KAAM,mCACNC,UAAW,EACXC,KAAM,UAERgB,gBAAiB,CACfnB,GAAI,mBACJC,KAAM,0CACNE,KAAM,UAERiB,OAAQ,CACNpB,GAAI,SACJC,KAAM,iCACNE,KAAM,UAERkB,cAAe,CACbrB,GAAI,iBACJC,KAAM,wCACNE,KAAM,UAERmB,OAAQ,CAAEtB,GAAI,SAAUC,KAAM,wBAAyBE,KAAM,UAC7DoB,WAAY,CACVvB,GAAI,aACJC,KAAM,qCACNE,KAAM,UAERqB,YAAa,CACXxB,GAAI,cACJC,KAAM,0BACNE,KAAM,UAERsB,WAAY,CACVzB,GAAI,aACJC,KAAM,yBACNE,KAAM,UAERuB,SAAU,CACR1B,GAAI,WACJC,KAAM,mCACNE,KAAM,UAERwB,YAAa,CACX3B,GAAI,eACJC,KAAM,sCACNE,KAAM,UAERyB,iBAAkB,CAChB5B,GAAI,oBACJC,KAAM,2CACNE,KAAM,UAER0B,oBAAqB,CACnB7B,GAAI,uBACJC,KAAM,8CACNE,KAAM,UAER2B,qBAAsB,CACpB9B,GAAI,wBACJC,KAAM,+CACNE,KAAM,UAER4B,UAAW,CACT/B,GAAI,YACJC,KAAM,yBACNE,KAAM,UAER6B,SAAU,CAAEhC,GAAI,WAAYC,KAAM,oBAAqBE,KAAM,UAC7DlC,WAAY,CAAE+B,GAAI,aAAcC,KAAM,sBAAuBE,KAAM,UACnE8B,MAAO,CAAEjC,GAAI,QAASC,KAAM,gCAAiCE,KAAM,UACnE+B,eAAgB,CACdlC,GAAI,kBACJC,KAAM,yCACNE,KAAM,UAERgC,YAAa,CACXnC,GAAI,eACJC,KAAM,sCACNE,KAAM,UAERiC,aAAc,CACZpC,GAAI,gBACJC,KAAM,uCACNC,UAAW,SACXC,KAAM,UAERkC,YAAa,CACXrC,GAAI,eACJC,KAAM,sCACNE,KAAM,UAERmC,YAAa,CACXtC,GAAI,eACJC,KAAM,sCACNE,KAAM,UAERoC,iBAAkB,CAChBvC,GAAI,oBACJC,KAAM,2CACNE,KAAM,UAERqC,KAAM,CAAExC,GAAI,OAAQC,KAAM,oBAAqBE,KAAM,UACrDsC,UAAW,CACTzC,GAAI,YACJC,KAAM,oCACNE,KAAM,UAERuC,iBAAkB,CAChB1C,GAAI,oBACJC,KAAM,2CACNE,KAAM,UAERwC,gBAAiB,CACf3C,GAAI,mBACJC,KAAM,0CACNE,KAAM,UAERyC,aAAc,CACZ5C,GAAI,eACJC,KAAM,uCACNE,KAAM,UAER0C,aAAc,CACZ7C,GAAI,gBACJC,KAAM,uCACNE,KAAM,UAER2C,UAAW,CACT9C,GAAI,aACJC,KAAM,oCACNE,KAAM,UAER4C,WAAY,CACV/C,GAAI,cACJC,KAAM,qCACNC,UAAW,OACXC,KAAM,UAER6C,eAAgB,CACdhD,GAAI,kBACJC,KAAM,yBACNE,KAAM,UAER8C,gBAAiB,CACfjD,GAAI,mBACJC,KAAM,0CACNE,KAAM,UAER+C,cAAe,CACblD,GAAI,iBACJC,KAAM,wCACNE,KAAM,UAERgD,aAAc,CACZnD,GAAI,gBACJC,KAAM,uCACNE,KAAM,UAERiD,UAAW,CAAEpD,GAAI,YAAaC,KAAM,sBAAuBE,KAAM,UACjEkD,MAAO,CAAErD,GAAI,QAASC,KAAM,gCAAiCE,KAAM,UACnEmD,MAAO,CAAEtD,GAAI,QAASC,KAAM,gCAAiCE,KAAM,UACnEoD,MAAO,CAAEvD,GAAI,QAASC,KAAM,sBAAuBE,KAAM,UACzDqD,OAAQ,CACNxD,GAAI,SACJC,KAAM,iCACNE,KAAM,UAERsD,uBAAwB,CACtBzD,GAAI,2BACJC,KAAM,iDACNE,KAAM,UAERuD,iBAAkB,CAChB1D,GAAI,oBACJC,KAAM,2BACNE,KAAM,UAERwD,MAAO,CAAE3D,GAAI,QAASC,KAAM,uBAAwBE,KAAM,UAC1DyD,MAAO,CAAE5D,GAAI,QAASC,KAAM,oBAAqBE,KAAM,UACvD0D,WAAY,CAAE7D,GAAI,aAAcC,KAAM,sBAAuBE,KAAM,UACnE5B,QAAS,CAAEyB,GAAI,UAAWC,KAAM,yBAA0BE,KAAM,UAChE2D,QAAS,CAAE9D,GAAI,UAAWC,KAAM,sBAAuBE,KAAM,WAMlD4D,EAAgB,aAKhBC,EAAyB,CACpC,EAAG,uBACH,GAAK,mCACL,EAAG,qBACH,EAAG,4BAMQC,EAAS,CACpBC,OAAQ,iCACRC,SAAU,mCACVC,KAAM,+BACNC,SAAU,mCACVnF,UAAW,oCACXoF,SAAU,oCAMCC,EAAc,kBAKdC,EAAkB,CAC7B,WACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,cCxaQ,IAACC,EAAQ,KAEnBC,MAAMC,KAAK,8BAA8BC,UACvCH,EAAQ,MAAMA,MAMZ,iBAAOI,CAAWC,GAChB,OAAOA,EAAMC,QACX,UACAC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,UAAU,GAAGC,eAE5D,CAQD,iBAAOC,CAAWC,EAAKC,EAAe,MACpC,IAAIT,EAAQS,GAAgB,KAC5B,IACET,EAAQU,KAAKC,SAASC,IAAIpI,EAAOC,GAAI+H,EAC7C,CAAQ,MACAK,EAAWC,IAAIC,OAAOC,MAAM,YAAYR,eACzC,CACD,OAAOR,CACR,CAOD,uBAAaiB,CAAWT,EAAKR,GAC3B,IACEA,QAAcU,KAAKC,SAASO,IAAI1I,EAAOC,GAAI+H,EAAKR,GAChDa,EAAWC,IAAIC,OAAOC,MAAM,YAAYR,cAAgBR,KAChE,CAAQ,MACAa,EAAWC,IAAIC,OAAOC,MAAM,YAAYR,eACzC,CACF,EACF,IChCO,IAACW,EAAgB,KAE3BvB,MAAMC,KAAK,8BAA8BC,MAAOe,IAC9CM,EAAgB,MAAMA,sBAAsBN,EAAWC,IAAIK,cAEzDC,eAAiB,KAEjBC,iBAAmB,KAEnBC,aAAe,KAQf,wBAAMC,CAAmBC,GAEvBC,KAAKC,OAAUD,KAAKE,MAAiC,CAACF,KAAKE,OAA/BF,MAAKG,IACjCH,KAAKI,OAAUJ,KAAK5C,MAAiC,CAAC4C,KAAK5C,OAA/B4C,MAAKK,IAG7BL,KAAKE,QACPF,KAAKM,MAAQlB,EAAWC,IAAInB,MAAMqC,gBAChCP,MAAKQ,EAAkBR,KAAKE,MAAMI,SAKtCN,KAAKS,iBAAmBvC,EAAMY,WAAW,oBACzCkB,KAAKU,iBAAmBxC,EAAMY,WAAW,oBACzCkB,KAAKW,gCAAkCzC,EAAMY,WAC3C,mCAEFkB,KAAKY,mBAAqB1C,EAAMY,WAAW,sBAC3CkB,KAAKa,oBAAsB3C,EAAMY,WAAW,uBACnB,QAArBkB,KAAKE,OAAOtG,MAAmBoG,KAAKa,sBACtCb,KAAKa,oBAAsB3C,EAAMY,WAAW,4BAE9CkB,KAAKc,qBAAuB5C,EAAMY,WAAW,wBAE7CkB,KAAKe,mBAAqB,CACxB,UACA,gBACA,eACA,eACA,oBACA,YACA,iBAGuB,SAArBf,KAAKE,OAAOtG,MAAwC,cAArBoG,KAAKE,OAAOtG,MAC7CoG,KAAKgB,kBAAoB,CACvB,WACA,cACA,aACA,YACA,OACA,QACA,UACA,oBAGIhB,MAAKiB,KACmB,YAArBjB,KAAKE,OAAOtG,MACrBoG,KAAKgB,kBAAoB,CACvB,cACA,YACA,QACA,iBAGIhB,MAAKkB,KACDlB,KAAKE,aACTF,MAAKmB,GAEd,CAOD,OAAMF,SACEG,QAAQC,IAAI,CAChBrB,MAAKsB,IACLtB,MAAKuB,MASPvB,MAAKwB,IAKLxB,MAAKyB,GACN,CAOD,OAAMP,SACEE,QAAQC,IAAI,CAChBrB,MAAKsB,IACLtB,MAAK0B,IACL1B,MAAK2B,IACL3B,MAAK4B,MAEP5B,MAAK6B,EAAgB,UAAW,aAChC7B,MAAK6B,EAAgB,QAAS,UAC9B7B,MAAK6B,EAAgB,OAAQ,SAC7B7B,MAAKwB,IACLxB,MAAKyB,GACN,CAOD,OAAMN,GACJnB,MAAK6B,EAAgB,UAAW,aAChC7B,MAAK6B,EAAgB,QAAS,UAC9B7B,MAAK6B,EAAgB,OAAQ,SAC7B7B,MAAKwB,UACCxB,MAAKsB,IACXtB,MAAK8B,IACL9B,MAAK+B,IACL/B,MAAKyB,GACN,CAQD,EAAAI,CAAgBG,EAAYC,GAE1B,MAAM5H,EACJ2F,KAAKE,OAAOgC,OAAO7H,WAAa8H,OAAOC,SAAS/H,UAClD,GAAyB,IAArBA,EAAUgI,OAAc,OAG5B,MAAMjL,EAAUkL,OAAOC,QAAQlI,GAC5BmI,QAAQnL,GAA4C,IAAhCgD,EAAUhD,EAAQ,IAAIkH,QAC1CkE,KAAI,EAAEC,EAAWrL,MAChB,MAAMqC,EAAOyI,OAAOC,SAAS/H,UAAUqI,GAAWC,MAC5CC,EAAkB,UAAZX,EAAsB5K,GAASQ,KAAOR,GAASuL,IAC3D,MAAO,CACLnJ,GAAI,GAAGuI,KAAcU,IACrBhJ,KAAMsG,KAAKS,iBAAmBvC,EAAMI,WAAWoE,GAAahJ,EAC5DmJ,MACc,WAAZZ,EACIjC,MAAK8C,EAAoBzI,EAAUqI,GAAWK,YAC9C,GACNC,MAAOhD,KAAKE,MACR,CACEzB,KAAMW,EAAWC,IAAInB,MAAM+E,YAAYL,GACvCM,MAAO,GAAGjE,KAAKkE,KAAKC,SAClB,2BACIhE,EAAWC,IAAInB,MAAM+E,YAAYL,MAEzC,KACJS,MACErD,KAAKE,OAAqB,cAAZ+B,EACV,CACExD,KAAM,IAAIW,EAAWC,IAAInB,MAAM+E,YAC7B5L,GAASQ,SAEXqL,MAAO,GAAGjE,KAAKkE,KAAKC,SAClB,4BACIhE,EAAWC,IAAInB,MAAM+E,YAAY5L,GAASQ,SAElD,KACNyL,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAUd,GACjC,IAIL1C,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAIwI,GAChC,CAOD,sBAAMyB,CAAiBC,GACrB,MAAMC,UAAEA,EAASC,WAAEA,EAAU7B,WAAEA,EAAa,QAAW2B,EAGjDG,EAAkB,IAAIC,IAG5B,IAAK,MAAOhF,EAAKR,KAAUsF,EAAY,CACrC,MAAMG,EACJzF,EAAM2D,QAAQ+B,YAAYC,SAAS,IAAIC,YAAYvK,KAC/CqI,EAAUhK,EAAgB+L,IAAiB7L,OAAS,QACrD2L,EAAgBM,IAAInC,IACvB6B,EAAgBrE,IAAIwC,EAAS,IAAI8B,KACnCD,EAAgB3E,IAAI8C,GAASxC,IAAIV,EAAKR,EACvC,CAGD,IAAK,MAAMA,KAAS+D,OAAO+B,OAAOpM,GAAkB,CAClD,MAAME,EAAQoG,EAAMpG,MAGpB,IAAK2L,EAAgBM,IAAIjM,GAAQ,SAGjC,MAAMmM,EAAiB,IAClBV,EACHnK,GAAI,GAAGtB,KAASyL,EAAUnK,KAC1BG,KAAM,kBAIJ,CAAC,WAAY,cAAc2K,SAASX,EAAUnK,MAChD6K,EAAeE,iBAAkB,GAInC,MAAMC,EAAkB,CAAEhL,GAAItB,EAAOyB,KAAM,gBAGrCoG,KAAK0E,SAASJ,EAAgBG,GAGjB,UAAfzC,GACFhC,KAAK2E,aAAaL,SAIdtE,KAAK4E,aAAa,CACtBhB,UAAWU,EACXT,WAAYC,EAAgB3E,IAAIhH,GAChC6J,cAEH,CACF,CAMD,EAAAR,GAEE,MAAMqD,EAAa,CACjBC,WAAY,4CACR7F,KAAKlE,QAAQgK,SAASC,UAAYhF,KAAK5C,OAAO3D,IAAM,CACtDwL,QAAS,2BAIP7E,EAAShB,EAAWC,IAAInB,MAAMgH,sBAC9BC,EAAW/E,GAAQqC,KAAKrF,GAAUA,EAAM3D,KACxC2L,EAAanG,KAAKlE,OACpBkE,KAAKlE,OAAOqK,WAAW5C,QAAQ6C,GAC7BF,EAASZ,SAASc,EAAUL,WAE9B,GAEEM,SAAY7L,IAChB,GAAW,eAAPA,GAA6C,IAAtB2L,EAAW/C,OAAc,CAElD,MAAO,CAAEkD,MAAO,gBAAiB9G,KADP2G,EAAW,GAAGN,WAEzC,CACD,MAAO,EAAE,EAWL9C,EAAa,UACb5K,EAAUkL,OAAOC,QAAQsC,GAAYpC,KAAI,EAAEhJ,EAAIC,MAC5C,CACLD,KACAC,KAAMuF,KAAKkE,KAAKC,SAAS1J,GACzBsJ,MAAOsC,SAAS7L,GAChB+L,SAAiB,eAAP/L,EAAsB,UAb3B2L,EAAW/C,OAAS,GACzB+C,EAAWK,OAAOJ,GAAcA,GAAWP,aACzC,UACA,IAUuD,GACzDxB,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAU/J,OAKpCuG,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,UAChC,CAMD,EAAA8H,GAEE,MAAMmE,EAAe1F,KAAKE,OAAO9I,QACjC,GAA4B,IAAxBsO,EAAarD,OAAc,OAG/B,MAAML,EAAa,SACb5K,EAAUkL,OAAOC,QAAQmD,GAAcjD,KAAI,EAAEe,EAAUtL,MAC3D,MAAMwB,EAAOxB,EAAOwB,KACpB,MAAO,CACLD,GAAI+J,EACJ9J,KAAMA,EACN4J,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAUtL,EAAOuB,IACxC,IAIHuG,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,WAChC,CAMD,OAAM6H,GACJ,GAA4B,IAAxBtB,KAAKI,QAAQiC,OAAc,OAG/B,MAAMrH,EAAamH,OAAOwD,cAAcnD,QACrCjL,GAA+B,KAAjBA,EAAUkC,KAE3B,GAA0B,IAAtBuB,EAAWqH,OAAc,OAG7B,MAAML,EAAa,YACb5K,QAAgBgK,QAAQC,IAC5BrG,EAAWyH,KAAIpE,MAAO9G,IACpB,MAAMqO,EAAe5F,KAAKC,OAAOwF,OAAOvF,GAC/BA,EAAM2F,QAAQC,MAClBrO,GACCA,EAAOsO,SAASD,MAAME,GAAWA,IAAWzO,EAAUkC,OACrDhC,GAAQwO,aAGTvM,EAAOuF,KAAKkE,KAAKC,SAAS7L,EAAUoL,QAAUpL,EAAUoL,MAC9D,MAAO,CACLlJ,GAAIlC,EAAUkC,GACdC,OACAwM,IAAK9G,EAAWC,IAAInB,MAAMiI,SAAS5O,GACnCiO,SAAU,UAASI,EAAe,UAAY,IAC9CtC,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxC0M,cAAepG,MAAKqG,QACZrG,MAAKsG,EAAyB/O,EAAUkC,GAAIlC,EAAUoL,QAE9DT,OAAQ,CAAEF,aAAYwB,SAAUjM,EAAUkC,IAC3C,KAKLuG,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,cAChC,CAMD,OAAM8M,GACJ,IACGnH,EAAWC,IAAInB,MAAMsI,eAAetN,EAAgBlC,MACpDkC,EAAgBC,SAAS6G,KAAKE,OAAOtG,MAEtC,OAEF,MAAMoI,EAAa,UAEnB,IAAI7G,EACF8D,KAAKC,SAASC,IACZjG,EAAgBlC,GAChBkC,EAAgBC,SAAS6G,KAAKE,OAAOtG,QAClC,GAMLuB,EAHAiE,EAAWC,IAAInB,MAAMsI,eAAetN,EAAgBlC,KACpDsL,OAAOmE,KAAKtL,GAAUkH,OAEXC,OAAOC,QAAQpH,GACvBqH,QAAO,EAAEkE,EAAGnI,KAAWA,EAAMoI,UAC7BlE,KAAI,EAAE1D,EAAKR,MACVA,EAAMQ,IAAMA,EACLR,KAGA,CACT,CACE7E,KAAMuF,KAAKkE,KAAKC,SAAS,sBACzBxJ,KAAM,iBACNsI,QAAQ,EACRyE,SAAS,EACT5H,IAAK,eAEP,CACErF,KAAMuF,KAAKkE,KAAKC,SAAS,uBACzBxJ,KAAM,SACNsI,QAAQ,EACRyE,SAAS,EACT5H,IAAK,cAEP,CACErF,KAAMuF,KAAKkE,KAAKC,SAAS,wBACzBxJ,KAAM,WACNsI,QAAQ,EACRyE,SAAS,EACT5H,IAAK,gBAMX,MAAM3H,EAAU+D,EAASsH,KAAKjL,IAC5B,IAAIoP,EAAS,GACTpB,EAAW,GACXU,EAAM,GACNlD,EAAQ,GACZ,GAAIxL,EAAQ0K,OACV,OAAQ1K,EAAQuH,KACd,IAAK,aACH6H,EACE5G,KAAKE,MAAMgC,OAAO2E,WAAWnP,WAAa,EAAI,UAAY,GAC5D8N,EAAW,SAASoB,IACpBV,EAAM9G,EAAWC,IAAInB,MAAMiI,SACzB,0DAEFnD,EAAQ,CAAEvE,KAAMuB,KAAKE,MAAMgC,OAAO2E,WAAWnP,YAC7C,MACF,IAAK,cACHwO,EAAM9G,EAAWC,IAAInB,MAAMiI,SACzB,2DAEFnD,EAAQ,CACNvE,KAAM,GAAGuB,KAAKE,MAAMgC,OAAO2E,WAAWC,MAAMC,WAAW/G,KAAKE,MAAMgC,OAAO2E,WAAWC,MAAME,WAE5F,MACF,IAAK,cACHJ,EAAS5G,KAAKE,MAAMgC,OAAO2E,WAAWI,YAClC,UACA,GACJzB,EAAW,SAASoB,IACpBV,EAAM9G,EAAWC,IAAInB,MAAMiI,SACzB,+DAID,CACL,MAAM5H,EAAQyB,KAAKE,MAAMgH,QAAQhO,EAAgBlC,GAAIQ,EAAQuH,KAC7D,OAAQvH,EAAQoC,MACd,IAAK,WACHgN,EAASrI,EAAQ,UAAY,GAC7BiH,EAAW,SAASoB,IACpB,MACF,IAAK,WACHA,EAASrI,EAAMA,MAAQ,EAAI,UAAY,GACvCiH,EAAW,SAASoB,IACpB5D,EAAQ,CAAEvE,KAAM,GAAGF,EAAMA,OAAS,KAAKA,EAAM4I,KAAO,KACpD,MACF,IAAK,SACHP,EAASrI,EAAQ,EAAI,UAAY,GACjCiH,EAAW,SAASoB,IACpB5D,EAAQ,CAAEvE,KAAMF,GAChB,MACF,IAAK,iBACHyE,EAAQ,CAAEvE,KAAM,GAAGF,GAAOwI,SAAW,KAAKxI,GAAOyI,SAAW,KAGjE,CAED,MAAO,CACLvN,GAAIjC,EAAQuH,IACZrF,KAAMlC,EAAQmL,MACdW,SAAUtD,MAAKuD,EAAavB,EAAYxK,EAAQkC,MAChD8L,WACAU,MACAlD,QACAd,OAAQ,CACNF,aACAoF,WAAY5P,EAAQuH,IACpBsI,YAAa7P,EAAQoC,MAExB,IAIHoG,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,YAChC,CAMD,OAAMiI,GACJ,MAAMM,EAAa,SAGb6D,EAAU,IAAI9B,IAClB/D,KAAKE,MAAMoH,uBAAuB7E,KAAKhL,GAAW,CAACA,EAAOgC,GAAIhC,MAEhE,GAAqB,IAAjBoO,EAAQ0B,KAAY,OAGxB,MAAM9K,EAAiB,IAAIsH,IACrB5G,EAAmB,IAAI4G,IACvByD,EAAkB,IAAIC,IAC1BtF,OAAOwD,cAAclD,KAAKiF,GAAiBA,EAAaC,OAI1D,IAAK,MAAOC,EAAUnQ,KAAWoO,EAAQtD,UACnC9K,EAAOoQ,gBAC+B,IAAtCpQ,EAAOqQ,QAAQ5F,QAAQ6F,YAAyB9I,KAAK+I,KAAKC,QAE1DT,EAAgBpD,IAAI3M,EAAOgC,MAE3BhC,EAAOyQ,YACT/K,EAAiBsC,IAAImI,EAAUnQ,GAE/BgF,EAAegD,IAAImI,EAAUnQ,WAK3B2J,QAAQC,IAAI,CAChBrB,KAAK4E,aAAa,CAChBhB,UAAW,CAAEnK,GAAI,mBACjBoK,WAAYpH,EACZuF,eAEFhC,KAAK4E,aAAa,CAChBhB,UAAW,CAAEnK,GAAI,qBACjBoK,WAAY1G,EACZ6E,gBAGL,CAMD,EAAAmG,GAEE,IAAKnI,KAAKC,OAAOwF,OAAOvF,GAAyB,cAAfA,EAAMtG,OAAuB,OAG/D,MAAMoI,EAAa,aACb4E,EACJ5G,KAAKE,MAAMgC,OAAO2E,WAAWnP,WAAa,EAAI,UAAY,GACtDN,EAAU,CACd,CACEqC,GAAI,aACJC,KAAMuF,KAAKkE,KAAKC,SAAS,uBACzBoC,SAAU,SAASoB,IACnBV,IAAK9G,EAAWC,IAAInB,MAAMiI,SACxB,0DAEFnD,MAAO,CAAEvE,KAAMuB,KAAKE,MAAMgC,OAAO2E,WAAWnP,YAC5C4L,SAAUtD,MAAKuD,EAAavB,EAAYtI,MACxCwI,OAAQ,CAAEF,aAAYwB,SAAU,gBAKpCxD,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,cAChC,CAMD,OAAMkI,GAEJ,MAAMjG,EAAQ,IAAIqI,IAChB,IAAI/D,KAAKM,OAAOkC,QAAO,EAAI,CAAAjE,KAA0B,SAAfA,EAAM3E,QAE9C,GAAmB,IAAf8B,EAAM6L,KAAY,OAGtB,MAAMa,EAAc,IAAIrE,IAAI,CAC1B,CAAC,iBAAkB,IAAIA,KACvB,CAAC,kBAAmB,IAAIA,OAGpBsE,EAAc,CAClBC,WAAY,qBACZ/C,MAAO,gBACPgD,QAAS,kBACTC,KAAM,eACN9M,MAAO,SAGH+M,EAAmB,CACvBC,kBAAmB,qBACnB9N,gBAAiB,kBACjB+N,gBAAiB,mBACjBC,mBAAoB,sBACpBC,oBAAqB,uBACrBC,cAAe,iBACflN,YAAa,cACbmN,GAAI,cACJC,SAAU,YACVC,UAAW,mBACXC,YAAa,eACbC,KAAM,YACNC,aAAc,gBACdC,KAAM,QACNnM,uBAAwB,0BAG1B,IAAK,MAAO6B,EAAKR,KAAU7C,EAAO,CAChC,MAAMsI,EAAiBzF,EAAM2D,OAAO+B,WAAWC,SAAS,IAAItK,KACtDA,EAAO2E,EAAM2D,OAAOtI,KAAK2E,MACzB+K,EAAU/K,EAAM2D,OAAOtI,MAAM2P,QAE/BvF,EACFoE,EAAYjJ,IAAI,kBAAkBM,IAAIV,EAAKR,GAE3C6J,EAAYjJ,IAAI,mBAAmBM,IAAIV,EAAKR,GAI1C8J,EAAYzO,KACTwO,EAAYhE,IAAIiE,EAAYzO,KAC/BwO,EAAY3I,IAAI4I,EAAYzO,GAAO,IAAImK,KACzCqE,EAAYjJ,IAAIkJ,EAAYzO,IAAO6F,IAAIV,EAAKR,IAI1CkK,EAAiBa,KACdlB,EAAYhE,IAAIqE,EAAiBa,KACpClB,EAAY3I,IAAIgJ,EAAiBa,GAAU,IAAIvF,KACjDqE,EAAYjJ,IAAIsJ,EAAiBa,IAAU7J,IAAIV,EAAKR,GAEvD,CAGD,IAAK,MAAM9E,KAAMH,EAAmB,CAClC,MAAMuK,EAAauE,EAAYjJ,IAAI1F,GACnC,IAAKoK,GAAkC,IAApBA,EAAW0D,KAAY,SAG1C,MAAM3D,EAAY,CAChBnK,GAAIF,EAAME,GAAIA,GACdC,KAAMuF,KAAKkE,KAAKC,SAAS7J,EAAME,GAAIC,OAAS,IAIxCsI,EAAa,gBACbhC,KAAK4E,aAAa,CAAEhB,YAAWC,aAAY7B,qBAC3ChC,KAAK0D,iBAAiB,CAAEE,YAAWC,aAAY7B,cACtD,CACF,CAMD,OAAMJ,GAEJ,GAAwB,IAApB5B,KAAKM,MAAMiH,KAAY,OAG3B,MAAMiC,EAAe,IAAIzF,IAAI,CAC3B,CAAC,WAAY,IAAIA,KACjB,CAAC,aAAc,IAAIA,KACnB,CAAC,cAAe,IAAIA,KACpB,CAAC,aAAc,IAAIA,KACnB,CAAC,YAAa,IAAIA,KAClB,CAAC,OAAQ,IAAIA,KACb,CAAC,QAAS,IAAIA,KACd,CAAC,UAAW,IAAIA,OAGlB,IAAK,MAAOhF,EAAKR,KAAUyB,KAAKM,MAE9B,GAAI/B,EAAM2D,QAAQuH,SAAW,GAAKzJ,MAAK0J,EAAcnL,KAC/CA,EAAM2D,OAAOzG,SACf+N,EAAarK,IAAI,YAAYM,IAAIV,EAAKR,GAEtCiL,EAAarK,IAAI,cAAcM,IAAIV,EAAKR,GAGtCyB,MAAK2J,EAAcpL,IAAyB,eAAfA,EAAM3E,MACrC4P,EAAarK,IAAI,eAAeM,IAAIV,EAAKR,GACvCyB,MAAK4J,EAAgBrL,IACvB,OAAQA,EAAM3E,MACZ,IAAK,YACH4P,EAAarK,IAAI,cAAcM,IAAIV,EAAKR,GACxC,MACF,IAAK,YACHiL,EAAarK,IAAI,aAAaM,IAAIV,EAAKR,GACvC,MACF,IAAK,OACHiL,EAAarK,IAAI,QAAQM,IAAIV,EAAKR,GAClC,MACF,IAAK,OACHiL,EAAarK,IAAI,SAASM,IAAIV,EAAKR,GACnC,MACF,IAAK,SACHiL,EAAarK,IAAI,WAAWM,IAAIV,EAAKR,GAQ/C,IAAK,MAAM0D,KAAWjC,KAAKgB,kBAAmB,CAC5C,MAAM6C,EAAa2F,EAAarK,IAAI8C,GACpC,IAAK4B,GAAkC,IAApBA,EAAW0D,KAAY,SAG1C,MAKM5D,EAAO,CAAEC,UALG,CAChBnK,GAAIwI,EACJvI,KAAMuF,KAAKkE,KAAKC,SAAS7J,EAAM0I,GAASvI,OAGhBmK,oBAGpB7D,KAAK4E,aAAajB,SAClB3D,KAAK0D,iBAAiBC,EAC7B,CACF,CAMD,EAAA7B,GAEE,GACyB,IAAvB9B,KAAKC,OAAOoC,SACXrC,KAAKC,OAAOwF,OAAOvF,GAAyB,cAAfA,EAAMtG,OAEpC,OAGF,MAAMoI,EAAa,UAKb5K,EAAUkL,OAAOC,QAJL,CAChBsH,UAAW,qBACXC,SAAU,sBAE8BrH,KAAI,EAAEhJ,EAAIC,MAE3C,CACLD,KACAC,KAHFA,EAAOuF,KAAKkE,KAAKC,SAAS1J,GAIxB4J,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAU/J,OAKpCuG,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,SAChC,CAMD,EAAAsI,GAEE,MAAM9E,EAAS+C,KAAKE,OAAOgC,OAAOjF,QAAUkF,OAAOC,SAASnF,OAC5D,GAAsB,IAAlBA,EAAOoF,OAAc,OAGzB,MAAML,EAAa,QACb5K,EAAUkL,OAAOC,QAAQtF,GAC5BwF,KAAI,EAAEhJ,EAAI3B,MACT,IACE,MAAM4B,EAAOyI,OAAOC,SAASnF,OAAOxD,GAAIkJ,MACxC,MAAO,CACLlJ,KACAC,KAAMsG,KAAKS,iBAAmBvC,EAAMI,WAAW7E,GAAMC,EACrDmJ,MAAO7C,MAAK8C,EAAoBhL,EAAMyG,OACtCyE,MAAOhD,KAAKE,MACR,CAAEzB,KAAMW,EAAWC,IAAInB,MAAM+E,YAAYnL,EAAMiS,QAC/C,GACJzG,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAU/J,GAEnC,CAAC,MAAOuQ,GAEP,OADA5K,EAAWC,IAAIC,OAAO0K,MAAMlS,GACrB,IACR,KAEF0K,QAAQ1K,KAAYA,IAGvBkI,KAAKyD,WAAWrM,EAAS,CAAEqC,GAAI,UAChC,CAKD,OAAMwQ,GAEJ,MAAMC,EAAS,IAAInG,IACjB,IAAI/D,KAAKM,OAAOkC,QAAO,EAAI,CAAAjE,KAA0B,UAAfA,EAAM3E,QAE9C,GAAoB,IAAhBsQ,EAAO3C,KAAY,OAGvB,MAAM4C,EAAY,IAAIpG,IAAI,CACxB,CAAC,eAAgB,IAAIA,KACrB,CAAC,eAAgB,IAAIA,KACrB,CAAC,aAAc,IAAIA,KACnB,CAAC,WAAY,IAAIA,KACjB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,KACxB,CAAC,kBAAmB,IAAIA,OAI1B,IAAK,MAAOhF,EAAKR,KAAU2L,EACzB,GAAKlK,MAAK2J,EAAcpL,IAAWyB,MAAKoK,EAAe7L,GAEvD,OAAQA,EAAM2D,OAAOmI,YAAYC,MAC/B,IAAK,SACHH,EAAUhL,IAAI,gBAAgBM,IAAIV,EAAKR,GACvC,MACF,IAAK,SACH4L,EAAUhL,IAAI,gBAAgBM,IAAIV,EAAKR,GACvC,MACF,IAAK,OACH4L,EAAUhL,IAAI,cAAcM,IAAIV,EAAKR,GACrC,MACF,QACE,OAAQA,EAAM2D,OAAOqI,OACnB,KAAK,EACHJ,EAAUhL,IAAI,YAAYM,IAAIV,EAAKR,GACnC,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,GAC1C,MACF,KAAK,EACH4L,EAAUhL,IAAI,mBAAmBM,IAAIV,EAAKR,IAQpD,MAAMiM,EAAelI,OAAOC,QAAQvC,KAAKE,MAAMgC,OAAOgI,QAAQO,UAGxDC,EAAgB,IAAI3G,IAC1B,IAAI4G,EAAqB3K,KAAKY,mBAC1BgK,EAAoB5K,KAAKY,mBACzBiK,EAAW,KAEf,IAAK,MAAO9L,EAAKR,KAAUiM,EAAc,CACvC,MAAMM,EAAWvM,EAAMA,MAAQ,EACzBwM,EAASxM,EAAM4I,IAAM,EACrB6D,EAAWzM,EAAMgM,MAAQ,EAEnB,SAARxL,GACF6L,EACEA,GAAsBE,GAAYC,GAAUC,EAC9CzM,EAAM0M,cAAgBL,GAAqBI,EAC3CH,EAAW,CAAC9L,EAAKR,IACRQ,EAAImM,WAAW,UAAoB,WAARnM,GACpC4L,EAAqBA,GAAuBG,GAAYC,EACxDxM,EAAM0M,cAAgBN,EACtBD,EAAcjL,IAAIV,EAAKR,IACduM,IACTvM,EAAM4M,gBAAiB,EACvBT,EAAcjL,IAAIV,EAAKR,GAE1B,CAGD,GAAIsM,EAAS,GAAGI,cAAe,CACXP,EAAcvL,IAAI,QAAQ0L,EAAS,GAAGN,SAC9CY,gBAAiB,CAC5B,CAED,MAAMC,EAAiB,IAAI3D,IAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,SAE3D,IAAK,MAAMhO,KAAMwE,EAAiB,CAEhC,IAAKkM,EAAU/F,IAAI3K,GAAK,SAExB,MAAME,EAAYJ,EAAME,GAAIE,UACtB0R,EACU,SAAd1R,EACIkR,EAAS,GACTH,EAAcvL,IAAI,QAAQxF,MAE9B4E,MAAO+M,EAAQ,EAACnE,IAChBA,EAAM,EAAC8D,cACPA,GAAgB,GACdI,GAAa,CAAA,EAGjB,IAAKJ,GAAiBG,EAAehH,IAAIzK,GAAY,SAGrD,MAAMiK,EAAY,CAChBnK,GAAIF,EAAME,GAAIA,GACdC,KAAMuF,KAAKkE,KAAKC,SAAS7J,EAAME,GAAIC,MACnC6R,KAAM,CACJvI,MAAO,CACLuC,MAAO,gBACP9G,KAAM0I,EAAM,EAAI,GAAGmE,KAASnE,IAAQ,MAM1CnH,KAAK2E,aAAaf,GAElB,MAAMD,EAAO,CACXC,YACAC,WAAYsG,EAAUhL,IAAI1F,GAC1BuI,WAAY,eAIRhC,KAAK4E,aAAajB,SAClB3D,KAAK0D,iBAAiBC,EAC7B,CACF,CAMD,EAAAlC,GAEE,GAA2B,IAAvBzB,KAAKC,OAAOoC,OAAc,OAC9B,IAAKrC,KAAKC,OAAOwF,OAAOvF,GAAyB,cAAfA,EAAMtG,OAAuB,OAE/D,MAAMoI,EAAa,UAGbwJ,EAAe,CACnBC,UAAW,CAAE/R,KAAMuF,KAAKkE,KAAKC,SAAS,uBACtC6D,YAAa,CAAEvN,KAAMuF,KAAKkE,KAAKC,SAAS,4BAIrCpD,KAAKE,OAASF,KAAKE,MAAMgC,OAAO2E,WAAW6E,GAAGnN,MAAQ,WAClDiN,EAAaC,UAGtB,MAAMrU,EAAUkL,OAAOC,QAAQiJ,GAAc/I,KAAKkJ,IAChD,MAAMlS,EAAKkS,EAAY,GACjBjS,EAAOiS,EAAY,GAAGjS,KAC5B,IAAI8L,EAAW,GACf,GAAuB,gBAAnBmG,EAAY,GAAsB,CAMpCnG,EAAW,SALIxF,KAAKC,OAAOwF,OACxBvF,GAAUA,EAAMgC,OAAO2E,YAAYI,cAElC,UACA,IAEL,CACD,MAAO,CACLxN,KACAC,OACA8L,WACAlC,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxCwI,OAAQ,CAAEF,aAAYwB,SAAU/J,GACjC,IAOHuG,KAAKyD,WAAWrM,EAHE,CAAEqC,GAAI,WAIzB,CAQD,kBAAMmL,CAAajB,EAAMiI,GACvB,MAAM/H,WAAEA,EAAUD,UAAEA,EAAS5B,WAAEA,GAAe2B,EAG9C,GAAwB,IAApBE,EAAW0D,KAAY,OAI3B,KADqC,iBAAd3D,EAAyBA,EAAYA,GAAWnK,IACzD,OAGd,MAAMrC,QAAgBgK,QAAQC,IAC5B,IAAIwC,GAAYpB,KACdpE,MAAOzG,SAAeoI,MAAK6L,EAAWjU,EAAK,GAAIoK,MAKnDhC,KAAKyD,WAAWrM,EAASwM,EAC1B,CASD,OAAMiI,CAAWC,EAAQ9J,EAAa,QACpC,MAAMvI,EAAKqS,EAAOrS,IAAMqS,EAAOnE,IAC/B,IAAIjO,EAAOoS,GAAQpS,MAAQoS,GAAQnJ,MAC/B6C,EAAW,GACf,GAAIlD,OAAOyJ,OAAOD,EAAQ,YAAa,CAErCtG,EAAW,SADKsG,EAAO7F,SAAuB,GAAZ,WAEnC,CACD,MAAMsF,EAAOvL,MAAKgM,EAAaF,GACzB1F,QAAgBpG,MAAKqG,QACnBrG,MAAKiM,EAAgBH,IAE7B,MAAO,CACLrS,KACAC,OACA8L,WACAU,IAAK9G,EAAWC,IAAInB,MAAMiI,SAAS2F,GACnCjJ,MAAO7C,MAAKkM,EACVJ,EAAO5J,QAAQ+B,YAAYC,SAAS,IAAIC,WAAWvK,MAErDuS,MAAOnM,MAAKoM,EAAiBN,GAC7BO,MAAOrM,MAAKsM,EAAsBR,GAClC9I,MAAOuI,GAAMvI,MACbK,MAAOkI,GAAMlI,MACbkJ,MAAOhB,GAAMgB,MACbjJ,SAAUtD,MAAKuD,EAAavB,EAAYtI,GACxC0M,UACAlE,OAAQ,CAAEF,aAAYwB,SAAU/J,GAEnC,CAQD,EAAAiQ,CAAc9R,GACZ,OAAO,CAUR,CAQD,EAAAgS,CAAgBhS,GAEd,OACGoI,KAAKa,sBAFc,CAAC,aAAc,QAAS,QAEA0D,SAAS3M,EAAKgC,OACzDhC,EAAKsK,OAAOzG,UAA0B,eAAd7D,EAAKgC,IAEjC,CAQD,EAAA+P,CAAc/R,GACZ,OACEoI,KAAKY,sBACHhJ,EAAKsK,OAAOsK,MAAMjO,QACnB3G,EAAKsK,OAAOsK,MAAMrF,GAEtB,CAQD,EAAAiD,CAAerS,GACb,GAAyB,cAArBiI,KAAKE,OAAOtG,MAAwBoG,KAAKa,oBAC3C,OAAO,EACT,GAAIb,KAAKc,qBAAsB,OAAO,EAStC,OAPyB,IAAI2G,IAC3BnF,OAAOmE,KAAKtE,OAAOC,SAASqK,uBAAuBjK,QAChDkK,GAAwC,aAApBA,KAMNtI,IAAIrM,EAAMmK,OAAOmI,YAAYC,OAC9CvS,EAAMmK,OAAOmI,YAAYsC,QAE5B,CAED,EAAApJ,CAAavB,EAAY4K,GAEvB,MAAO,GADQ,GAAG3N,KAAKkE,KAAKC,SAASjM,EAAY6K,SAAoB,KAClD4K,KAAgB,EACpC,CAQD,EAAAZ,CAAapU,GAQX,MAAO,CAAEoL,MANO,UAAdpL,EAAKgC,KACDoG,MAAK6M,EAAcjV,GACnBoI,MAAK8M,EAAiBlV,GAIZyL,MAHFrD,MAAK+M,EAAanV,GAGT2U,MAFTvM,MAAKgN,EAAgBpV,GAGpC,CAQD,EAAAiV,CAAc9U,GACZ,IAAKiI,KAAKU,iBAAkB,OAAO,KAEnC,MAAMuM,EAAalV,EAAMmK,QAAQgL,WACjC,IAAKD,EAAY,OAAO,KAExB,MAAM1B,EAAO,CAAE9M,KAAM,GAAIyE,MAAO,IAO1BiK,EAAkB7K,OAAOC,QANR,CACrB6K,MAAO,2BACPC,QAAS,4BACTC,SAAU,+BAIT9K,QAAO,EAAEzD,KAASkO,EAAWlO,KAC7B0D,KAAI,EAAE1D,EAAK4D,MACV4I,EAAK9M,MAAQQ,KAAKkE,KAAKC,SAAS,GAAGT,SAC5B1D,KAAKkE,KAAKC,SAAST,MAW9B,OAPIsK,EAAWM,SACbJ,EAAgBK,KAAK,IAAIvO,KAAKkE,KAAKC,SAAS,uBAC5CmI,EAAK9M,MAAQ,KAAKQ,KAAKkE,KAAKC,SAAS,2BAGvCmI,EAAKrI,MAAQiK,EAAgBM,KAAK,MAE3BlC,CACR,CAOD,EAAApL,GACE,MAAMuN,EAAe,CAAC,YAAa,OACnC,OAAO1N,KAAKC,OAAOwF,OAAOvF,GAAUwN,EAAanJ,SAASrE,EAAMtG,QAC5DoG,KAAKC,OACL,EACL,CAOD,EAAAI,GACE,MAAMqN,EAAe,CAAC,YAAa,OACnC,OAAO1N,KAAKC,OAAOwF,OAAOvF,GAAUwN,EAAanJ,SAASrE,EAAMtG,QAC5DoG,KAAKI,OACL,EACL,CAQD,EAAA0M,CAAiBlV,GACf,MAAM6R,EAAW7R,GAAMsK,QAAQuH,UAAY,EAC3C,MAAO,CACLhL,KAAMgL,EAAW,EAAIA,EAAW,GAChCvG,MAAO,GAAGjE,KAAKkE,KAAKC,SAAS,yBAAyBqG,IAEzD,CAQD,EAAAsD,CAAanV,GACX,MAAM4U,EAAO5U,GAAMsK,QAAQsK,KAC3B,KAAMA,GAAMrF,IAAM,GAAI,MAAO,CAAA,EAC7B,MAAMwG,EACyB,YAA7BnB,EAAKoB,SAAS,IAAIC,OACd,GACA,IAAI5O,KAAKkE,KAAKC,SAAS,mBACvByK,EACJ1L,OAAOC,SAAS0L,kBAAkBtB,EAAKoB,SAAS,IAAIC,SAASlL,OAC7D6J,EAAKoB,SAAS,IAAIC,OACdE,EAAYF,EAAS,GAAGF,IAAME,IAAW,GAEzCpP,EAAO,GADS+N,EAAKrF,KAAOqF,EAAKwB,OAAS,MACfxB,EAAKrF,MAEtC,MAAO,CAAE1I,OAAMyE,MADD,GAAGzE,IAAOsP,IAEzB,CAQD,EAAAf,CAAgBpV,GAEd,MAAMqW,EAAgBrW,GAAMsK,QAAQ+B,YAAYC,SAAS,GACnDgK,EAAcD,GAAeE,aAAaC,UAAU,GACpDC,EAAYH,GAAaI,OACzBC,EAAcL,GAAatU,KAC3B4U,EAAgBN,GAAa3P,MAEnC,IAAK8P,IAAcE,GAAeF,IAAczW,EAAK6B,GAAI,MAAO,GAGhE,GAAoB,cAAhB8U,EAA6B,CAC/B,MAAME,EAAWJ,EAAUK,OAAO,EAAGL,EAAUM,YAAY,MACrDL,EAASM,QAAQC,MAAMC,YAAY9O,KAAKE,MAAMgC,OAAQuM,GAE5D,GAAIH,EAAQ,CACV,MAAM7P,EAAO,GAAG6P,EAAO/P,OAAS,MAC9B+P,EAAOnH,IAAM,IAAImH,EAAOnH,MAAQ,KAElC,MAAO,CACL1I,OACAyE,MAAO,GAAGzE,KAAQ6P,EAAO3L,OAAS,KAErC,CACT,KAAa,CACL,MAAM2L,EAAStO,KAAKE,MAAMI,OAAOnB,IAAIkP,GAGrC,GAAIC,GAA0B,YAAhBC,EACZ,OAAOvO,MAAK+M,EAAauB,GAI3B,GAAIA,GAAQpM,QAAQuH,SAAU,CAC5B,MAAMhL,EAAO,GACX+P,EAAgB,EACZ,GAAGA,KAAiBvP,KAAKkE,KAAKC,SAAS,kBACvC,KACHkL,EAAOpM,OAAOuH,WACjB,MAAO,CACLhL,OACAyE,MAAO,GAAGzE,KAAQ6P,EAAO5U,OAE5B,CACF,CAED,MAAO,EACR,CAQD,EAAA8G,CAAkBF,GAEhB,GAAIpC,EAAMY,WAAW,mBAAoB,OAAOwB,EAGhD,MAAMyO,EAAsB,IAAItH,IAAI,CAAC,SAAU,OAAQ,QAGvD,OAAO,IAAI1D,IACT,IAAIzD,EAAMiC,WAAWC,QAAO,EAAEkE,EAAG9O,MAC/B,MAAMoM,EAAiBpM,EAAKsK,QAAQiC,YAAYvK,KAChD,OAAQmV,EAAoB3K,IAAIJ,EAAe,IAGpD,CAOD,EAAAlB,CAAoByH,GAClB,MAAMrH,EAAQf,OAAOC,SAAS4M,kBAAkBzE,IAAU,GACpDlS,EAAOoF,EAAuB8M,GACpC,OAAOlS,EAAO,aAAaA,aAAgB6K,UAAgB,EAC5D,CAQD,EAAAgJ,CAAuBlI,GACrB,MAAMd,EACJf,OAAOC,SAAS6M,uBAAuBjL,IAAmB,GACtD3L,EAAOJ,EAAgB+L,IAAiB3L,KAC9C,OAAOA,EAAO,aAAaA,aAAgB6K,UAAgB,EAC5D,CAQD,EAAAoJ,CAAsBvU,GACpB,GACkB,UAAhBA,GAAO6B,OACNoG,KAAKU,mBACL3I,EAAMmK,QAAQgL,YAAY9I,IAAI,iBAE/B,OAAO,KACT,MAAMlB,EAAQjE,KAAKkE,KAAKC,SAAS,yCAEjC,MAAO,uBADMnK,aACiCiK,KAC/C,CAQD,EAAAkJ,CAAiBrU,GACf,GAAoB,UAAhBA,GAAO6B,OAAqBoG,KAAKc,qBAAsB,OAAO,KAClE,MAAMyJ,EAAQxS,EAAMmK,OAAOqI,MACrBmC,EAAkB3U,EAAMmK,OAAOmI,YAAYC,KAC3CqC,EAAW5U,EAAMmK,OAAOmI,YAAYsC,SACpCtU,EAAOsU,EACTnP,EACA,GAAGA,sBACD0F,EACgB,WAApBwJ,EACIzN,KAAKkE,KAAKC,SAAS,4BACnBuJ,EACA1N,KAAKkE,KAAKC,SAAS,0BACnBnE,KAAKkE,KAAKC,SAAS,4BAGzB,MAA4B,aAApBsJ,GAAsD,WAApBA,GAC9B,IAAVnC,EAEE,KADA,aAAalS,aAAgB6K,SAElC,CAED,OAAM+I,CAAgBH,GACpB,GAA6B,SAAzB9L,KAAKkP,gBAA4B,MAAO,GAE5C,MAAMxV,EAAOoS,GAAQpS,MAAQ,GAE7B,GAA6B,aAAzBsG,KAAKkP,gBAAgC,OAAOxV,EAEhD,MAAMyV,GAA6C,IAA9BrD,EAAO5J,QAAQ6F,WAC9BqH,EACmC,iBAAhCtD,GAAQ5J,QAAQkN,YACnBtD,GAAQ5J,QAAQkN,aACfD,EACGrD,GAAQ5J,QAAQiN,cAAcC,YAC9BtD,GAAQ5J,QAAQkN,aAAa7Q,QAAU,GACjD,IAAI8Q,EACAnC,EACAoC,EACAC,EAiBJ,OAhBKJ,IACHE,EAAYvD,GAAQuD,WAAa,KACjCnC,EAAa,IACPpB,EAAO5J,QAAQsN,gBAAkB,MACjC1D,EAAO5J,QAAQuN,8BAAgC,GACnD3D,EAAO5J,QAAQ4F,QAAQ4H,QAAQvL,WAC/B2H,EAAO5J,QAAQ4F,QAAQ4H,QAAQpB,OAC/BxC,EAAO5J,QAAQ4F,QAAQ4H,QAAQC,MAC/B7D,EAAO5J,QAAQ4F,QAAQ4H,QAAQE,UAC/BpN,QAAQqN,GAAMA,IAChBP,EAASH,EAAe,KAAOrD,GAAQwD,QAAU,KACjDC,EACmB,WAAjBzD,GAAQlS,KACJoG,MAAK8P,EAAqBhE,GAAQ5J,QAAQgL,YAC1C,MAED,CAAExT,OAAM0V,cAAaC,YAAWnC,aAAYoC,SAAQC,SAC5D,CAQD,OAAMjJ,CAAyB7M,EAAIkJ,GACjC,GAA6B,SAAzB3C,KAAKkP,gBAA4B,MAAO,GAE5C,MAAM3X,EAAY4K,OAAOwD,cAAcoK,MAAMC,GAAMA,EAAEvW,KAAOA,IAE5D,GAA6B,aAAzBuG,KAAKkP,kBAAmC3X,EAAW,OAAOoL,EAE9D,MAAMsN,EAAe1Y,EAAU2Y,gBACrBC,SAAS5Y,EAAU2Y,WACzB,KAGJ,MAAO,CACLvN,QACAyM,YAJkBa,GAAcxR,MAAM2R,SAAW,GAKjDC,WAJiBJ,EAMpB,CAOD,OAAM5J,CAAYiK,GAChB,GAA6B,SAAzBtQ,KAAKkP,gBAA4B,MAAO,GAC5C,GAA2B,iBAAhBoB,EAA0B,OAAOA,EAE5C,MAAM5W,EAAOuF,KAAKkE,KAAKC,SAASkN,EAAY5W,MAE5C,GAA6B,aAAzBsG,KAAKkP,gBAAgC,OAAOxV,EAEhD,MAAM6W,EAAW,OAAO7W,SAElB2W,EAAaC,EAAYD,YAAcrQ,KAAKE,MAE5CkP,EACJkB,GAAaE,4BACNC,WAAWC,WAChBzR,KAAKkE,KAAKC,SAASkN,GAAalB,aAAe,IAC/C,CAAE/Q,OAAO,EAAMgS,aAAYM,SAAS,IAGlCC,EAAaN,GAAahB,OAC5B,wBAAwBgB,EAAYhB,WAAWrQ,KAAKkE,KAAKC,SACvD1F,EAAO4S,EAAYhB,kBAErB,GAEEuB,EAAiBP,GAAapD,WAChC,+BAA+BoD,EAAYpD,WACxCzK,KACEqO,GACC,8BAA8B7R,KAAKkE,KAAKC,SACtC0N,cAGLrD,KAAK,YACR,GAEEsD,EAAaT,GAAaf,OAC5Be,EAAYf,OACT9M,KACEuO,GACC,yBAAyB/R,KAAKkE,KAAKC,SACjC4N,EAAMrO,OAASqO,cAGpBvD,KAAK,IACR,GAEEwD,EAAcX,GAAaY,QAC7BZ,EAAYY,QACTzO,KACEuO,GACC,2CAA2C/R,KAAKkE,KAAKC,SACnD4N,EAAMrO,OAASqO,cAGpBvD,KAAK,IACR,GAEE0D,EAAgBb,GAAac,UAC/Bd,EAAYc,UACT3O,KACEuO,GACC,qCAAqC/R,KAAKkE,KAAKC,SAC7C4N,EAAMrO,kBAGX8K,KAAK,IACR,GAEE4D,EAAgBf,GAAajB,UAC/B,yBAAyBiB,EAAYjB,UAClC7M,QAAQ8O,GAAaA,EAASC,UAC9B9O,KAAK6O,GAIG,6CAHOrS,KAAKkE,KAAKC,SAASkO,EAAS3O,UAE9B,GADC2O,EAASA,UAAY,EAAI,IAAM,KACtBA,EAASA,UAAY,gBAG5C7D,KAAK,YACR,GAEE+D,EAAa,CACjBZ,EACAG,EACAE,EACAE,GACA1D,KAAK,IAEDgE,EAAWD,EACb,yBAAyBA,UACzB,GAOJ,OAAKpC,GAAgBqC,GAAaJ,EAE3B,QAAQd,IANbkB,GAAYJ,EACR,iCAAiCI,IAAWJ,UAC5C,KAIiCjC,IAAcyB,UAFGnX,CAGzD,CAED,EAAAoW,CAAqB4B,GACnB,OAAKA,EACEpP,OAAOC,QAAQmP,GACnBlP,QACC,EAAE/I,EAAIkY,KACJA,GAAYxP,OAAOC,SAASwP,gBAAgBC,OAAOzN,IAAI3K,KAE1DgJ,KAAI,EAAEhJ,EAAIiN,KACTzH,KAAKkE,KAAKC,SAASjB,OAAOC,SAAS0P,eAAerY,MAPxB,IAS/B,EACF,IC9kDO,IAACsY,EAAW,KAEtB5T,MAAMC,KAAK,8BAA8BC,MAAOe,IAC9C,MAAM4S,EAASzY,EACf+I,OAAO+B,OAAO2N,GAAQC,SAAS9Z,IAC7BA,EAAMuB,KAAO0F,EAAWC,IAAInB,MAAMiF,KAAKhL,EAAMuB,MAC7CvB,EAAMmL,SAAW,UAAUlE,EAAWC,IAAInB,MAAMiF,KAAKhL,EAAMuB,OAAO,IAEpE,MAAMwY,EAAc5P,OAAO+B,OAAO2N,GAClCD,EAAW,CACTI,OAAQ,CACN,CACEC,OAAQ,UACR3Y,GAAI,UACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,sBAChC6O,OAAQ,CAAC,IAAKA,EAAO5a,QAASgb,OAAQ,qBAExC,CACEA,OAAQ,YACR3Y,GAAI,YACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,wBAChC6O,OAAQ,CACN,IAAKA,EAAOzU,QAAS6U,OAAQ,qBAC7B,IAAKJ,EAAOxW,UAAW4W,OAAQ,uBAC/B,IAAKJ,EAAO/W,YAAamX,OAAQ,yBACjC,IAAKJ,EAAO3U,MAAO+U,OAAQ,mBAC3B,IAAKJ,EAAO9W,WAAYkX,OAAQ,wBAChC,IAAKJ,EAAO/V,KAAMmW,OAAQ,oBAG9B,CACEA,OAAQ,WACR3Y,GAAI,WACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,qBAChC6O,OAAQ,CACN,IAAKA,EAAO1X,eAAgB8X,OAAQ,4BACpC,IAAKJ,EAAOtV,gBAAiB0V,OAAQ,+BAGzC,CACEA,OAAQ,SACR3Y,GAAI,SACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,sBAChC6O,OAAQ,CACN,IAAKA,EAAOxX,aAAc4X,OAAQ,yBAClC,IAAKJ,EAAOnW,aAAcuW,OAAQ,wBAClC,IAAKJ,EAAOxV,WAAY4V,OAAQ,sBAChC,IAAKJ,EAAOrX,SAAUyX,OAAQ,mBAC9B,IAAKJ,EAAOxY,gBAAiB4Y,OAAQ,2BACrC,IAAKJ,EAAOnY,gBAAiBuY,OAAQ,2BACrC,IAAKJ,EAAOlY,gBAAiBsY,OAAQ,2BACrC,IAAKJ,EAAOjY,gBAAiBqY,OAAQ,2BACrC,IAAKJ,EAAOhY,gBAAiBoY,OAAQ,2BACrC,IAAKJ,EAAO/X,gBAAiBmY,OAAQ,2BACrC,IAAKJ,EAAO9X,gBAAiBkY,OAAQ,2BACrC,IAAKJ,EAAO7X,gBAAiBiY,OAAQ,2BACrC,IAAKJ,EAAO5X,gBAAiBgY,OAAQ,6BAGzC,CACEA,OAAQ,aACR3Y,GAAI,aACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,yBAChC6O,OAAQ,CACN,IAAKA,EAAO3X,UAAW+X,OAAQ,wBAC/B,IAAKJ,EAAO/U,OAAQmV,OAAQ,uBAGhC,CACEA,OAAQ,UACR3Y,GAAI,UACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,sBAChC6O,OAAQ,CACN,IAAKA,EAAO7U,iBAAkBiV,OAAQ,6BACtC,IAAKJ,EAAOvV,eAAgB2V,OAAQ,2BACpC,IAAKJ,EAAOhX,WAAYoX,OAAQ,wBAGpC,CACEA,OAAQ,UACR3Y,GAAI,UACJC,KAAM0F,EAAWC,IAAInB,MAAMiF,KAAK,0BAChC6O,OAAQ,CACN,IAAKA,EAAOjX,OAAQqX,OAAQ,kBAC5B,IAAKJ,EAAO5U,MAAOgV,OAAQ,iBAC3B,IAAKJ,EAAOlV,MAAOsV,OAAQ,iBAC3B,IAAKJ,EAAOha,QAASoa,OAAQ,sBAInCJ,OAAQE,EACT,IC9FO,IAACG,EAAc,KCIlB,SAASC,SAASC,GACvBtT,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,mBAAoB,CACpD0C,KAAMuF,KAAKkE,KAAKC,SACd,0DAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,0DAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,kBAAmB,CACnD0C,KAAMuF,KAAKkE,KAAKC,SACd,yDAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,yDAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,mBAAoB,CACpD0C,KAAMuF,KAAKkE,KAAKC,SACd,0DAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,0DAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,qBAAsB,CACtD0C,KAAMuF,KAAKkE,KAAKC,SACd,4DAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,4DAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,sBAAuB,CACvD0C,KAAMuF,KAAKkE,KAAKC,SACd,6DAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,6DAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,0BAA2B,CAC3D0C,KAAMuF,KAAKkE,KAAKC,SACd,iEAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,iEAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,uBAAwB,CACxD0C,KAAMuF,KAAKkE,KAAKC,SACd,8DAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,8DAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,IAIrBU,KAAKC,SAASoT,SAASvb,EAAOC,GAAI,kCAAmC,CACnE0C,KAAMuF,KAAKkE,KAAKC,SACd,yEAEFoP,KAAMvT,KAAKkE,KAAKC,SACd,yEAEFqP,MAAO,SACPC,QAAQ,EACR9Y,KAAM+Y,QACNC,SAAS,EACTC,SAAWtU,IACTgU,EAAWhU,EAAM,GAGvB,CDlIAJ,MAAMC,KAAK,8BAA8BC,MAAOe,IAC9CiT,EAAc,MAAMA,oBAAoBjT,EAAWC,IAAIgT,YAMrD,uBAAMS,CAAkBC,GACtB,MAAM/Q,WAAEA,EAAUwB,SAAEA,GAAaxD,KAAK9H,OAAOgK,OAE7C,GAAKlC,KAAKE,YAMFF,KAAKgT,aACTD,EACA/Q,EACAhC,KAAKE,MACLF,KAAK5C,MACLoG,QAVF,IAAK,MAAMpG,KAASgC,EAAWC,IAAInB,MAAMgH,sBAAuB,CAC9D,MAAMhF,EAAQ9C,EAAM8C,YACdF,KAAKgT,aAAaD,EAAO/Q,EAAY9B,EAAO9C,EAAOoG,EAC1D,CAUJ,CAWD,kBAAMwP,CAAaD,EAAO/Q,EAAY9B,EAAO9C,EAAOoG,GAClD,OAAQxB,GACN,IAAK,SACH9B,EAAM9I,QAAQoM,GAAUyP,MACxB,MACF,IAAK,UACHjT,KAAKkT,YAAYH,EAAO7S,EAAOsD,GAC/B,MACF,IAAK,QACHxD,KAAKmT,gBAAgBJ,EAAO7S,EAAOsD,GACnC,MACF,IAAK,OACHxD,KAAKoT,gBAAgBL,EAAO7S,EAAOsD,GACnC,MACF,IAAK,YACH,IAAKpG,EAAO,aACN4C,KAAKqT,gBAAgBnT,EAAO9C,EAAOoG,GACzC,MACF,IAAK,gBACGxD,KAAKsT,cAAcP,EAAO7S,GAChC,MACF,IAAK,eACGF,KAAKuT,aAAarT,EAAOsD,GAC/B,MACF,IAAK,mBACGxD,KAAKwT,iBAAiBT,EAAO7S,GACnC,MACF,IAAK,UACL,IAAK,OACL,IAAK,QACL,IAAK,SACCF,KAAKyT,eAAgBzT,KAAK0T,WAAWxT,EAAOsD,GAC3CxD,KAAK2T,QAAQZ,EAAO7S,EAAOsD,GAChC,MACF,IAAK,kBACGxD,KAAK4T,cAAc1T,EAAOsD,GAChC,MACF,IAAK,QACHxD,KAAK6T,UAAUd,EAAO7S,EAAOsD,GAC7B,MACF,IAAK,gBACGxD,KAAK8T,qBAAqBf,EAAO7S,EAAO9C,EAAOoG,GAK1D,CAQD,mBAAM8P,CAAcP,EAAO7S,GACzB,OAAQF,KAAK9H,QAAQgK,QAAQkF,YAC3B,IAAK,cACHpH,KAAK+T,cAAchB,EAAO7S,GAC1B,MACF,IAAK,mBACGF,KAAKwT,iBAAiBtT,GAC5B,MACF,IAAK,oBACGF,KAAKgU,kBAAkB9T,GAC7B,MACF,cACQF,KAAKiU,oBAAoB/T,GAGpC,CAOD,sBAAMsT,CAAiBtT,GACrB,MAAMgU,EAAoBhU,EAAMgC,OAAO2E,WAAWnP,WAC5Cyc,EAAgBD,GAAqBlU,KAAKoU,cAAgB,EAAI,GAChED,GAAiB,GAAKA,IAAkBD,GAC1ChU,EAAMmU,OAAO,CAAE,+BAAgCF,GAElD,CAOD,uBAAMH,CAAkB9T,GACtB,MAAMmU,GAAUnU,EAAMgC,OAAO2E,WAAWI,YACxC/G,EAAMmU,OAAO,CAAE,gCAAiCA,GACjD,CAOD,yBAAMJ,CAAoB/T,GACxB,MAAMkH,WAAEA,EAAUC,YAAEA,GAAgBrH,KAAK9H,OAAOgK,OAEhD,IAAI3D,EAAQ2B,EAAMgH,QAAQhO,EAAgBlC,GAAIoQ,IAAe,GAE7D,MAAMkN,QAAUjW,MAAOU,EAAKwV,EAAcC,KACpCA,IAAaD,SACTrU,EAAMoU,QAAQpb,EAAgBlC,GAAI+H,EAAKyV,EAC9C,EAGGC,YAAc,CAAC1V,EAAKwV,EAAe,EAAGG,EAAY,KACtD,MAAMF,EAAWxU,KAAKoU,aAClBO,KAAKxN,IAAI,EAAGoN,EAAeG,GAC3BH,EAAeG,EACnBJ,QAAQvV,EAAKwV,EAAcC,EAAS,EAGtC,OAAQnN,GACN,IAAK,iBACGiN,QAAQ7a,IAAK8E,GACnB,MAEF,IAAK,YAEDyB,KAAKoU,cACJ7V,EAAM4I,KAAO5I,EAAMA,MAAQA,EAAM4I,MACjC5I,EAAM4I,MAEPsN,YAAY,GAAGhb,WAAY8E,EAAMA,OAEnC,MAEF,IAAK,SACHkW,YAAYhb,GAAI8E,GAChB,MAEF,IAAK,iBACHA,EAAMwI,QAAUxI,GAAOwI,SAAW,EAClCxI,EAAMyI,QAAUzI,GAAOyI,SAAW,EAC9BhH,KAAK4U,OACPH,YAAY,GAAGhb,aAAc8E,EAAMyI,SAEnCyN,YAAY,GAAGhb,aAAc8E,EAAMwI,SAG1C,CASD,WAAAmM,CAAYH,EAAO7S,EAAOsD,GACnBtD,EAAMgC,QAAQ7H,WACnB6F,EAAMgT,YAAY1P,EAAU,CAAEuP,SAC/B,CASD,eAAAK,CAAgBL,EAAO7S,EAAOsD,GACvBtD,EAAMgC,QAAQ7H,WACnB6F,EAAMkT,gBAAgB5P,EAAU,CAAEuP,SACnC,CASD,eAAAI,CAAgBJ,EAAO7S,EAAOsD,GACvBtD,EAAMgC,QAAQ7H,WACnB6F,EAAMiT,gBAAgB3P,EAAU,CAAEuP,SACnC,CAQD,aAAAgB,CAAchB,EAAO7S,GACnBA,EAAM6T,cAAc,CAAEhB,SACvB,CAOD,mBAAMa,CAAc1T,GAClB,MAAM2U,OAAEA,EAAMjN,SAAEA,GAAa5H,KAAK9H,OAAOgK,OAEnC4S,QAAuBC,WAAW7U,MAAMA,EAAMzG,IAC/Cqb,IAGLA,EAAeE,KAAKH,EAAQjN,GAC5BzJ,MAAM8W,QAAQ,6BACf,CASD,SAAApB,CAAUd,EAAO7S,EAAOsD,GACjBtD,EAAMgC,QAAQjF,QACnBiD,EAAM2T,UAAUrQ,EAAU,CAAEuP,SAC7B,CASD,OAAAY,CAAQZ,EAAO7S,EAAOsD,GACpB,MAAM5L,EAAOwH,EAAWC,IAAInB,MAAMgX,QAAQhV,EAAOsD,GAE7CxD,MAAKmV,EAAevd,GACtBA,EAAKwd,eAELxd,EAAKqb,IAAI,CAAEF,QAAOsC,QAAQ,GAE7B,CAQD,EAAAF,CAAevd,GACb,MACiC,aAA/BA,GAAMsK,QAAQsK,MAAMqB,UAClBjW,GAAMsK,QAAQsK,MAAMjO,MAAQ,EAEjC,CASD,0BAAMuV,CAAqBf,EAAO7S,EAAO9C,EAAOoG,GAC9C,OAAQA,GACN,IAAK,YACHxD,KAAK+T,cAAchB,EAAO7S,GAC1B,MACF,IAAK,UACH,IAAK9C,GAAS6B,KAAKlE,QAAQgK,SAASC,UAAY5H,EAAM3D,GAAI,YACpDwF,KAAKlE,QAAQua,YACnB,MACF,IAAK,mBACGtV,KAAKuV,eAAerV,GAC1B,MACF,IAAK,oBACGF,KAAKgU,kBAAkB9T,GAC7B,MACF,IAAK,WACHA,EAAM4J,WACN,MACF,IAAK,YACH5J,EAAM2J,YAKV1L,MAAM8W,QAAQ,4BACf,CAOD,oBAAMM,CAAerV,GACdA,UACCA,EAAMqV,eAAe,CAAEC,kBAAkB,IAC/CrX,MAAM8W,QAAQ,6BACf,CASD,qBAAM5B,CAAgBnT,EAAO9C,EAAOoG,GAClC,IAAKpG,EAAO,OAEZ,MAAMsK,EAAevF,OAAOwD,cAAcoK,MACvCrI,GAAiBA,EAAajO,KAAO+J,IAElCiS,EACJ/N,GAAcgO,QAAQ,8BAA8BD,cACpDjS,EAAS0H,WAAW,qBAEtB,GAAIjM,KAAK0W,QAAUF,EAAc,CAC/B,MAAMG,EAAalO,EAAahO,MAAQgO,EAAa/E,YAC/C1D,KAAK0W,OAAOE,gBAAgBtC,aAAaqC,EAAY,CACzDE,UAAW9V,KAAKoU,cAE1B,KAAa,CACL,MAAM7c,EAAYyI,MAAK+V,EAAevS,GACtC,IAAKjM,EAAW,OAEhB,MAAME,EAASuI,MAAKgW,EAAY9V,EAAOsD,GACnC/L,GAAQwO,gBACJxO,EAAOwe,eAGT/V,EAAMgW,mBAAmB3e,EAAUkC,GAAI,CAC3CmN,OAAQnP,GAAQwO,WAAY,EAC5B6P,UAAW9V,KAAKoU,cAEnB,CAEDjW,MAAM8W,QAAQ,4BACf,CAQD,EAAAc,CAAevS,GACb,OAAOrB,OAAOwD,cAAcoK,MAAMtY,GAAWA,EAAOgC,KAAO+J,GAC5D,CAQD,EAAAwS,CAAY9V,EAAOsD,GACjB,OAAOtD,EAAM2F,QAAQkK,MAAMtY,GACzBA,EAAOsO,SAASN,OAAOO,GAAWA,IAAWxC,KAEhD,CAQD,kBAAM+P,CAAarT,EAAOsD,GACxB,MAAM/L,EAASyI,EACZoH,uBACAyI,MAAMtY,GAAWA,EAAOgC,KAAO+J,IAC7B/L,IAEDuI,KAAKoU,eAAiB3c,EAAO0e,eACzB1e,EAAOwe,eAEPxe,EAAO4c,OAAO,CAAEpO,UAAWxO,EAAOwO,WAG1C9H,MAAM8W,QAAQ,6BACf,CAOD,uBAAMmB,CAAkBrD,GACtB,MACM/Q,WAAEA,EAAUwB,SAAEA,GAAaxD,KAAK9H,OAAOgK,OAE7C,IAHc,CAAC,UAAW,OAAQ,QAAS,SAAU,aAG1CqC,SAASvC,GAAa,OAEjC,MAAMpK,EAAOwH,EAAWC,IAAInB,MAAMgX,QAAQlV,KAAKE,MAAOsD,GAElDxD,KAAKqW,QACPlY,MAAMmY,KAAK,oCAAqCvD,EAAOnb,GAEvDuG,MAAMmY,KAAK,qCAAsCvD,EAAOnb,EAE3D,EACF,IE/aO,IAAC2e,EAAgB,KAE3BpY,MAAMC,KAAK,8BAA8BC,MAAOe,IAC9CmX,EAAgB,MAAMA,sBAAsBnX,EAAWC,IAAIkX,cAEzD,gBAAAC,GAEE,OADsB,IAAI9W,CAE3B,CAGD,wBAAA+W,GAIE,MADgB,CAAEC,KAFF,gBAIjB,CAGD,cAAAC,CAAeC,GACb,IAAIC,EAQJ,OAJIA,EAAc,IAAIC,EAIfD,CACR,CAGD,gBAAAE,CAAiBC,GACfC,SAAwBD,EACzB,CAGD,sBAAME,GAEJ,OADiBnF,CAElB,EACF,IC5CH5T,MAAMgZ,GAAG,8BAA8B9Y,UACrC,MAAM+Y,EAASnY,KAAKoY,QAAQlY,IAAIpI,EAAOC,IACvCogB,EAAO/X,IAAM,CACXiY,0BPWwC,MOVxCf,iBAEFpY,MAAMmY,KAAK,4BAA6Bc,EAAO"}