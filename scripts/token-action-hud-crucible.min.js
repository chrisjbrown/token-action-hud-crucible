const e={ID:"token-action-hud-crucible"},t={ID:"token-action-hud-core"},s="2.0",i={actions:"actions",ability:"crucible.Ability",check:"tokenActionHud.crucible.check",condition:"tokenActionHud.crucible.condition",counter:"tokenActionHud.crucible.counter",effect:"crucible.Effect",exhaustion:"crucible.Exhaustion",feature:"TYPES.Item.feat",item:"tokenActionHud.crucible.item",save:"crucible.SAVE.Title.one",skill:"tokenActionHud.crucible.skill",spell:"TYPES.Item.spell",utility:"crucible.ActionUtil"},a={action:{group:"actions"},bonus:{group:"bonus-actions",icon:"fas fa-plus"},crew:{group:"crew-actions",icon:"fas fa-users"},day:{icon:"fas fa-hourglass-end"},hour:{icon:"fas fa-hourglass-half"},lair:{group:"lair-actions",icon:"fas fa-home"},minute:{icon:"fas fa-hourglass-start"},legendary:{group:"legendary-actions",icon:"fas fas fa-dragon"},reaction:{group:"reactions",icon:"fas fa-bolt"},reactiondamage:{group:"reactions",icon:"fas fa-bolt"},reactionmanual:{group:"reactions",icon:"fas fa-bolt"},special:{group:"special-actions",icon:"fas fa-star"},other:{group:"other-actions"}},n="systems/crucible/icons/svg/statuses/concentrating.svg",l={ID:"custom-crucible",COUNTERS:{character:"character-counters",group:"group-counters",npc:"npc-counters"}},o=["activeFeatures","passiveFeatures","backgroundFeatures","classFeatures","feats","monsterFeatures","raceFeatures","artificerInfusions","channelDivinity","defensiveTactics","eldritchInvocations","elementalDisciplines","fightingStyles","huntersPrey","kiAbilities","maneuvers","metamagicOptions","multiattacks","pactBoons","psionicPowers","runes","superiorHuntersDefense"],c={_1stLevelSpells:{id:"1st-level-spells",name:"tokenActionHud.crucible.1stLevelSpells",spellMode:1,type:"system"},_2ndLevelSpells:{id:"2nd-level-spells",name:"tokenActionHud.crucible.2ndLevelSpells",spellMode:2,type:"system"},_3rdLevelSpells:{id:"3rd-level-spells",name:"tokenActionHud.crucible.3rdLevelSpells",spellMode:3,type:"system"},_4thLevelSpells:{id:"4th-level-spells",name:"tokenActionHud.crucible.4thLevelSpells",spellMode:4,type:"system"},_5thLevelSpells:{id:"5th-level-spells",name:"tokenActionHud.crucible.5thLevelSpells",spellMode:5,type:"system"},_6thLevelSpells:{id:"6th-level-spells",name:"tokenActionHud.crucible.6thLevelSpells",spellMode:6,type:"system"},_7thLevelSpells:{id:"7th-level-spells",name:"tokenActionHud.crucible.7thLevelSpells",spellMode:7,type:"system"},_8thLevelSpells:{id:"8th-level-spells",name:"tokenActionHud.crucible.8thLevelSpells",spellMode:8,type:"system"},_9thLevelSpells:{id:"9th-level-spells",name:"tokenActionHud.crucible.9thLevelSpells",spellMode:9,type:"system"},abilities:{id:"abilities",name:"tokenActionHud.crucible.abilities",type:"system"},actions:{id:"actions",name:"tokenActionHud.crucible.actions",type:"system"},activeFeatures:{id:"active-features",name:"tokenActionHud.crucible.activeFeatures",type:"system"},artificerInfusions:{id:"artificer-infusions",name:"tokenActionHud.crucible.artificerInfusions",type:"system"},atWillSpells:{id:"at-will-spells",name:"tokenActionHud.crucible.atWillSpells",spellMode:"atwill",type:"system"},backgroundFeatures:{id:"background-features",name:"tokenActionHud.crucible.backgroundFeatures",type:"system"},bonusActions:{id:"bonus-actions",name:"tokenActionHud.crucible.bonusActions",type:"system"},cantrips:{id:"cantrips",name:"tokenActionHud.crucible.cantrips",spellMode:0,type:"system"},channelDivinity:{id:"channel-divinity",name:"tokenActionHud.crucible.channelDivinity",type:"system"},checks:{id:"checks",name:"tokenActionHud.crucible.checks",type:"system"},classFeatures:{id:"class-features",name:"tokenActionHud.crucible.classFeatures",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},conditions:{id:"conditions",name:"tokenActionHud.crucible.conditions",type:"system"},consumables:{id:"consumables",name:"TYPES.Item.consumablePl",type:"system"},containers:{id:"containers",name:"TYPES.Item.containerPl",type:"system"},counters:{id:"counters",name:"tokenActionHud.crucible.counters",type:"system"},crewActions:{id:"crew-actions",name:"tokenActionHud.crucible.crewActions",type:"system"},defensiveTactics:{id:"defensive-tactics",name:"tokenActionHud.crucible.defensiveTactics",type:"system"},eldritchInvocations:{id:"eldritch-invocations",name:"tokenActionHud.crucible.eldritchInvocations",type:"system"},elementalDisciplines:{id:"elemental-disciplines",name:"tokenActionHud.crucible.elementalDisciplines",type:"system"},equipment:{id:"equipment",name:"TYPES.Item.equipmentPl",type:"system"},equipped:{id:"equipped",name:"crucible.Equipped",type:"system"},exhaustion:{id:"exhaustion",name:"crucible.Exhaustion",type:"system"},feats:{id:"feats",name:"tokenActionHud.crucible.feats",type:"system"},fightingStyles:{id:"fighting-styles",name:"tokenActionHud.crucible.fightingStyles",type:"system"},huntersPrey:{id:"hunters-prey",name:"tokenActionHud.crucible.huntersPrey",type:"system"},innateSpells:{id:"innate-spells",name:"tokenActionHud.crucible.innateSpells",spellMode:"innate",type:"system"},kiAbilities:{id:"ki-abilities",name:"tokenActionHud.crucible.kiAbilities",type:"system"},lairActions:{id:"lair-actions",name:"tokenActionHud.crucible.lairActions",type:"system"},legendaryActions:{id:"legendary-actions",name:"tokenActionHud.crucible.legendaryActions",type:"system"},loot:{id:"loot",name:"TYPES.Item.lootPl",type:"system"},maneuvers:{id:"maneuvers",name:"tokenActionHud.crucible.maneuvers",type:"system"},metamagicOptions:{id:"metamagic-options",name:"tokenActionHud.crucible.metamagicOptions",type:"system"},monsterFeatures:{id:"monster-features",name:"tokenActionHud.crucible.monsterFeatures",type:"system"},multiattacks:{id:"multiattacks",name:"tokenActionHud.crucible.multiattacks",type:"system"},otherActions:{id:"other-actions",name:"tokenActionHud.crucible.otherActions",type:"system"},pactBoons:{id:"pact-boons",name:"tokenActionHud.crucible.pactBoons",type:"system"},pactSpells:{id:"pact-spells",name:"tokenActionHud.crucible.pactSpells",spellMode:"pact",type:"system"},passiveEffects:{id:"passive-effects",name:"crucible.EffectPassive",type:"system"},passiveFeatures:{id:"passive-features",name:"tokenActionHud.crucible.passiveFeatures",type:"system"},psionicPowers:{id:"psionic-powers",name:"tokenActionHud.crucible.psionicPowers",type:"system"},raceFeatures:{id:"race-features",name:"tokenActionHud.crucible.raceFeatures",type:"system"},reactions:{id:"reactions",name:"crucible.ReactionPl",type:"system"},rests:{id:"rests",name:"tokenActionHud.crucible.rests",type:"system"},runes:{id:"runes",name:"tokenActionHud.crucible.runes",type:"system"},saves:{id:"saves",name:"crucible.ClassSaves",type:"system"},skills:{id:"skills",name:"tokenActionHud.crucible.skills",type:"system"},superiorHuntersDefense:{id:"superior-hunters-defense",name:"tokenActionHud.crucible.superiorHuntersDefense",type:"system"},temporaryEffects:{id:"temporary-effects",name:"crucible.EffectTemporary",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},tools:{id:"tools",name:"TYPES.Item.toolPl",type:"system"},unequipped:{id:"unequipped",name:"crucible.Unequipped",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"},weapons:{id:"weapons",name:"TYPES.Item.weaponPl",type:"system"}},r="fas fa-sun",u={0:"fa-regular fa-circle",.5:"fa-regular fa-circle-half-stroke",1:"fa-solid fa-circle",2:"fa-regular fa-circle-dot"},p={common:"tokenActionHud.crucible.common",uncommon:"tokenActionHud.crucible.uncommon",rare:"tokenActionHud.crucible.rare",veryRare:"tokenActionHud.crucible.veryRare",legendary:"tokenActionHud.crucible.legendary",artifact:"tokenActionHud.crucible.artifact"},d="fas fa-circle-r",m=["cantrips","_1stLevelSpells","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","atWillSpells","innateSpells","pactSpells"];let h=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=c;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.name)}`}));const s=Object.values(t);h={layout:[{nestId:"actions",id:"actions",name:e.api.Utils.i18n("ACTOR.TABS.ACTIONS"),groups:[{...t.actions,nestId:"actions_actions"}]},{nestId:"inventory",id:"inventory",name:e.api.Utils.i18n("ACTOR.TABS.INVENTORY"),groups:[{...t.weapons,nestId:"inventory_weapons"},{...t.equipment,nestId:"inventory_equipment"},{...t.consumables,nestId:"inventory_consumables"},{...t.tools,nestId:"inventory_tools"},{...t.containers,nestId:"inventory_containers"},{...t.loot,nestId:"inventory_loot"}]},{nestId:"features",id:"features",name:e.api.Utils.i18n("ACTOR.TABS.SKILLS"),groups:[{...t.activeFeatures,nestId:"features_active-features"},{...t.passiveFeatures,nestId:"features_passive-features"}]},{nestId:"spells",id:"spells",name:e.api.Utils.i18n("TYPES.Item.spellPl"),groups:[{...t.atWillSpells,nestId:"spells_at-will-spells"},{...t.innateSpells,nestId:"spells_innate-spells"},{...t.pactSpells,nestId:"spells_pact-spells"},{...t.cantrips,nestId:"spells_cantrips"},{...t._1stLevelSpells,nestId:"spells_1st-level-spells"},{...t._2ndLevelSpells,nestId:"spells_2nd-level-spells"},{...t._3rdLevelSpells,nestId:"spells_3rd-level-spells"},{...t._4thLevelSpells,nestId:"spells_4th-level-spells"},{...t._5thLevelSpells,nestId:"spells_5th-level-spells"},{...t._6thLevelSpells,nestId:"spells_6th-level-spells"},{...t._7thLevelSpells,nestId:"spells_7th-level-spells"},{...t._8thLevelSpells,nestId:"spells_8th-level-spells"},{...t._9thLevelSpells,nestId:"spells_9th-level-spells"}]},{nestId:"attributes",id:"attributes",name:e.api.Utils.i18n("ACTOR.TABS.SKILLS"),groups:[{...t.skills,nestId:"attributes_skills"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("ACTOR.TABS.EFFECTS"),groups:[{...t.temporaryEffects,nestId:"effects_temporary-effects"},{...t.passiveEffects,nestId:"effects_passive-effects"},{...t.conditions,nestId:"effects_conditions"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.token,nestId:"utility_token"},{...t.rests,nestId:"utility_rests"},{...t.utility,nestId:"utility_utility"}]}],groups:s}}));let y=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{y=class Utils{static capitalize(e){return e.replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substring(1).toLowerCase()))}static getSetting(s,i=null){let a=i??null;try{a=game.settings.get(e.ID,s)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}return a}static async setSetting(s,i){try{i=await game.settings.set(e.ID,s,i),t.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}}}}));let g=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{g=class ActionHandler extends e.api.ActionHandler{featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(t){this.actors=this.actor?[this.actor]:this.#e(),this.tokens=this.token?[this.token]:this.#t(),this.actor&&(this.items=e.api.Utils.sortItemsByName(this.#s(this.actor.items))),this.abbreviateSkills=y.getSetting("abbreviateSkills"),this.displaySpellInfo=y.getSetting("displaySpellInfo"),this.showItemsWithoutActivationCosts=y.getSetting("showItemsWithoutActivationCosts"),this.showUnchargedItems=y.getSetting("showUnchargedItems"),this.showUnequippedItems=y.getSetting("showUnequippedItems"),"npc"!==this.actor?.type||this.showUnequippedItems||(this.showUnequippedItems=y.getSetting("showUnequippedItemsNpcs")),this.showUnpreparedSpells=y.getSetting("showUnpreparedSpells"),this.activationgroupIds=["actions","bonus-actions","crew-actions","lair-actions","legendary-actions","reactions","other-actions"],"hero"===this.actor?.type||"adversary"===this.actor?.type?(this.inventorygroupIds=["equipped","consumables","containers","equipment","loot","tools","weapons","unequipped"],await this.#i()):"vehicle"===this.actor?.type?(this.inventorygroupIds=["consumables","equipment","tools","weapons"],await this.#a()):this.actor||await this.#n()}async#i(){await Promise.all([this.#l()]),this.#o(),this.#c(),this.#r(),this.#u()}async#a(){}async#n(){await this.#l(),this.#o(),this.#u()}#o(){const e="skill",t=this.actor?.skills||SYSTEM.SKILLS;if(0===t.length)return;const s=Object.entries(t).map((([t])=>{const s=t;return{id:t,name:this.abbreviateSkills?y.capitalize(t):s,listName:this.#p(e,s),system:{actionType:e,actionId:t}}}));this.addActions(s,{id:"skills"})}async buildActivations(e){const{groupData:t,actionData:s,actionType:i="item"}=e,n=new Map;for(const[e,t]of s){const s=t.system?.activities?.contents[0]?.activation?.type,i=a[s]?.group??"other";n.has(i)||n.set(i,new Map),n.get(i).set(e,t)}for(const e of Object.values(a)){const s=e.group;if(!n.has(s))continue;const a={...t,id:`${s}+${t.id}`,type:"system-derived"};["equipped","unequipped"].includes(t.id)&&(a.defaultSelected=!1);const l={id:s,type:"system"};await this.addGroup(a,l),"spell"===i&&this.addGroupInfo(a),await this.buildActions({groupData:a,actionData:n.get(s),actionType:i})}}#r(){const t={initiative:"tokenActionHud.crucible.rollInitiative",...game.combat?.current?.tokenId===this.token?.id&&{endTurn:"tokenActionHud.endTurn"}},s=e.api.Utils.getControlledTokens(),i=s?.map((e=>e.id)),a=game.combat?game.combat.combatants.filter((e=>i.includes(e.tokenId))):[],getInfo1=e=>{if("initiative"===e&&1===a.length){return{class:"tah-spotlight",text:a[0].initiative}}return{}},n="utility",l=Object.entries(t).map((([e,t])=>({id:e,name:game.i18n.localize(t),info1:getInfo1(e),cssClass:"initiative"===e?"toggle"+(a.length>0&&a.every((e=>e?.initiative))?" active":""):"",listName:this.#p(n,t),system:{actionType:n,actionId:e}})));this.addActions(l,{id:"combat"})}#c(){const e=this.actor?.actions||SYSTEM.ACTION.DEFAULT_ACTIONS;if(0===e.length)return;const t="action",s=Object.entries(e).map((([e,s])=>{const i=s.name;return{id:e,name:i,listName:this.#p(t,i),system:{actionType:t,actionId:s.id}}}));this.addActions(s,{id:"actions"})}async#l(){if(0===this.tokens?.length)return;const t=CONFIG.statusEffects.filter((e=>""!==e.id));if(0===t.length)return;const s="condition",i=await Promise.all(t.map((async t=>{const i=this.actors.every((e=>e.effects.some((e=>e.statuses.some((e=>e===t.id))&&!e?.disabled)))),a=game.i18n.localize(t.label)??t.label;return{id:t.id,name:a,img:e.api.Utils.getImage(t),cssClass:"toggle"+(i?" active":""),listName:this.#p(s,a),tooltip:await this.#d(await this.#m(t.id,t.label)),system:{actionType:s,actionId:t.id}}})));this.addActions(i,{id:"conditions"})}async#h(){if(!e.api.Utils.isModuleActive(l.ID)||!l.COUNTERS[this.actor?.type])return;const t="counter";let s=game.settings.get(l.ID,l.COUNTERS[this.actor?.type])??{};s=e.api.Utils.isModuleActive(l.ID)&&Object.keys(s).length?Object.entries(s).filter((([e,t])=>t.visible)).map((([e,t])=>(t.key=e,t))):[{name:game.i18n.localize("crucible.DeathSave"),type:"successFailure",system:!0,visible:!0,key:"death-saves"},{name:game.i18n.localize("crucible.Exhaustion"),type:"number",system:!0,visible:!0,key:"exhaustion"},{name:game.i18n.localize("crucible.Inspiration"),type:"checkbox",system:!0,visible:!0,key:"inspiration"}];const i=s.map((s=>{let i="",a="",n="",o="";if(s.system)switch(s.key){case"exhaustion":i=this.actor.system.attributes.exhaustion>0?" active":"",a=`toggle${i}`,n=e.api.Utils.getImage("modules/token-action-hud-crucible/icons/exhaustion.svg"),o={text:this.actor.system.attributes.exhaustion};break;case"death-saves":n=e.api.Utils.getImage("modules/token-action-hud-crucible/icons/death-saves.svg"),o={text:`${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}`};break;case"inspiration":i=this.actor.system.attributes.inspiration?" active":"",a=`toggle${i}`,n=e.api.Utils.getImage("modules/token-action-hud-crucible/icons/inspiration.svg")}else{const e=this.actor.getFlag(l.ID,s.key);switch(s.type){case"checkbox":i=e?" active":"",a=`toggle${i}`;break;case"fraction":i=e.value>0?" active":"",a=`toggle${i}`,o={text:`${e.value??0}/${e.max??0}`};break;case"number":i=e>0?" active":"",a=`toggle${i}`,o={text:e};break;case"successFailure":o={text:`${e?.success??0}/${e?.failure??0}`}}}return{id:s.key,name:s.label,listName:this.#p(t,s.name),cssClass:a,img:n,info1:o,system:{actionType:t,counterKey:s.key,counterType:s.type}}}));this.addActions(i,{id:"counters"})}async#y(){const e="effect",t=new Map(this.actor.allApplicableEffects().map((e=>[e.id,e])));if(0===t.size)return;const s=new Map,i=new Map,a=new Set(CONFIG.statusEffects.map((e=>e._id)));for(const[e,n]of t.entries())n.isSuppressed||(!1!==n.parent?.system?.identified||game.user.isGM)&&(a.has(n.id)||(n.isTemporary?i.set(e,n):s.set(e,n)));await Promise.all([this.buildActions({groupData:{id:"passive-effects"},actionData:s,actionType:e}),this.buildActions({groupData:{id:"temporary-effects"},actionData:i,actionType:e})])}#g(){if(!this.actors.every((e=>"character"===e.type)))return;const t="exhaustion",s=this.actor.system.attributes.exhaustion>0?" active":"",i=[{id:"exhaustion",name:game.i18n.localize("crucible.Exhaustion"),cssClass:`toggle${s}`,img:e.api.Utils.getImage("modules/token-action-hud-crucible/icons/exhaustion.svg"),info1:{text:this.actor.system.attributes.exhaustion},listName:this.#p(t,name),system:{actionType:t,actionId:"exhaustion"}}];this.addActions(i,{id:"exhaustion"})}async#b(){const e=new Map([...this.items].filter((([,e])=>"feat"===e.type)));if(0===e.size)return;const t=new Map([["activeFeatures",new Map],["passiveFeatures",new Map]]),s={background:"backgroundFeatures",class:"classFeatures",monster:"monsterFeatures",race:"raceFeatures",feats:"feats"},i={artificerInfusion:"artificerInfusions",channelDivinity:"channelDivinity",defensiveTactic:"defensiveTactics",eldritchInvocation:"eldritchInvocations",elementalDiscipline:"elementalDisciplines",fightingStyle:"fightingStyles",huntersPrey:"huntersPrey",ki:"kiAbilities",maneuver:"maneuvers",metamagic:"metamagicOptions",multiattack:"multiattacks",pact:"pactBoons",psionicPower:"psionicPowers",rune:"runes",superiorHuntersDefense:"superiorHuntersDefense"};for(const[a,n]of e){const e=n.system.activities.contents[0]?.type,l=n.system.type.value,o=n.system.type?.subtype;e?t.get("activeFeatures").set(a,n):t.get("passiveFeatures").set(a,n),s[l]&&(t.has(s[l])||t.set(s[l],new Map),t.get(s[l]).set(a,n)),i[o]&&(t.has(i[o])||t.set(i[o],new Map),t.get(i[o]).set(a,n))}for(const e of o){const s=t.get(e);if(!s||0===s.size)continue;const i={id:c[e].id,name:game.i18n.localize(c[e].name)??""},a="feature";await this.buildActions({groupData:i,actionData:s,actionType:a}),await this.buildActivations({groupData:i,actionData:s,actionType:a})}}async#f(){if(0===this.items.size)return;const e=new Map([["equipped",new Map],["unequipped",new Map],["consumables",new Map],["containers",new Map],["equipment",new Map],["loot",new Map],["tools",new Map],["weapons",new Map]]);for(const[t,s]of this.items)if(s.system?.quantity>0&&this.#v(s)&&(s.system.equipped?e.get("equipped").set(t,s):e.get("unequipped").set(t,s),this.#k(s)&&"consumable"===s.type&&e.get("consumables").set(t,s),this.#A(s)))switch(s.type){case"container":e.get("containers").set(t,s);break;case"equipment":e.get("equipment").set(t,s);break;case"loot":e.get("loot").set(t,s);break;case"tool":e.get("tools").set(t,s);break;case"weapon":e.get("weapons").set(t,s)}for(const t of this.inventorygroupIds){const s=e.get(t);if(!s||0===s.size)continue;const i={groupData:{id:t,name:game.i18n.localize(c[t].name)},actionData:s};await this.buildActions(i),await this.buildActivations(i)}}#I(){if(0===this.actors.length||!this.actors.every((e=>"character"===e.type)))return;const e="utility",t=Object.entries({shortRest:"crucible.ShortRest",longRest:"crucible.LongRest"}).map((([t,s])=>({id:t,name:s=game.i18n.localize(s),listName:this.#p(e,s),system:{actionType:e,actionId:t}})));this.addActions(t,{id:"rests"})}async#S(){const e=new Map([...this.items].filter((([,e])=>"spell"===e.type)));if(0===e.size)return;const t=new Map([["atWillSpells",new Map],["innateSpells",new Map],["pactSpells",new Map],["cantrips",new Map],["_1stLevelSpells",new Map],["_2ndLevelSpells",new Map],["_3rdLevelSpells",new Map],["_4thLevelSpells",new Map],["_5thLevelSpells",new Map],["_6thLevelSpells",new Map],["_7thLevelSpells",new Map],["_8thLevelSpells",new Map],["_9thLevelSpells",new Map]]);for(const[s,i]of e)if(this.#k(i)&&this.#w(i))switch(i.system.preparation.mode){case"atwill":t.get("atWillSpells").set(s,i);break;case"innate":t.get("innateSpells").set(s,i);break;case"pact":t.get("pactSpells").set(s,i);break;default:switch(i.system.level){case 0:t.get("cantrips").set(s,i);break;case 1:t.get("_1stLevelSpells").set(s,i);break;case 2:t.get("_2ndLevelSpells").set(s,i);break;case 3:t.get("_3rdLevelSpells").set(s,i);break;case 4:t.get("_4thLevelSpells").set(s,i);break;case 5:t.get("_5thLevelSpells").set(s,i);break;case 6:t.get("_6thLevelSpells").set(s,i);break;case 7:t.get("_7thLevelSpells").set(s,i);break;case 8:t.get("_8thLevelSpells").set(s,i);break;case 9:t.get("_9thLevelSpells").set(s,i)}}const s=Object.entries(this.actor.system.spells).reverse(),i=new Map;let a=this.showUnchargedItems,n=this.showUnchargedItems,l=null;for(const[e,t]of s){const s=t.value>0,o=t.max>0,c=t.level>0;"pact"===e?(n=n||s&&o&&c,t.slotAvailable=n&&c,l=[e,t]):e.startsWith("spell")&&"spell0"!==e?(a=a||s&&o,t.slotAvailable=a,i.set(e,t)):s&&(t.slotsAvailable=!0,i.set(e,t))}if(l[1].slotAvailable){i.get(`spell${l[1].level}`).slotsAvailable=!0}const o=new Set([1,2,3,4,5,6,7,8,9,"pact"]);for(const e of m){if(!t.has(e))continue;const s=c[e].spellMode,a="pact"===s?l[1]:i.get(`spell${s}`),{value:n=0,max:r=0,slotAvailable:u=!1}=a||{};if(!u&&o.has(s))continue;const p={id:c[e].id,name:game.i18n.localize(c[e].name),info:{info1:{class:"tah-spotlight",text:r>0?`${n}/${r}`:""}}};this.addGroupInfo(p);const d={groupData:p,actionData:t.get(e),actionType:"spell"};await this.buildActions(d),await this.buildActivations(d)}}#u(){if(0===this.actors.length)return;if(!this.actors.every((e=>"character"===e.type)))return;const e="utility",t={deathSave:{name:game.i18n.localize("crucible.DeathSave")},inspiration:{name:game.i18n.localize("crucible.Inspiration")}};(!this.actor||this.actor.system.attributes.hp.value>0)&&delete t.deathSave;const s=Object.entries(t).map((t=>{const s=t[0],i=t[1].name;let a="";if("inspiration"===t[0]){a=`toggle${this.actors.every((e=>e.system.attributes?.inspiration))?" active":""}`}return{id:s,name:i,cssClass:a,listName:this.#p(e,i),system:{actionType:e,actionId:s}}}));this.addActions(s,{id:"utility"})}async buildActions(e,t){const{actionData:s,groupData:i,actionType:a}=e;if(0===s.size)return;if(!("string"==typeof i?i:i?.id))return;const n=await Promise.all([...s].map((async e=>await this.#H(e[1],a))));this.addActions(n,i)}async#H(t,s="item"){const i=t.id??t._id;let a=t?.name??t?.label,n="";if(Object.hasOwn(t,"disabled")){n=`toggle${t.disabled?"":" active"}`}const l=this.#C(t),o=await this.#d(await this.#T(t));return{id:i,name:a,cssClass:n,img:e.api.Utils.getImage(t),icon1:this.#$(t.system?.activities?.contents[0]?.activation.type),icon2:this.#L(t),icon3:this.#U(t),info1:l?.info1,info2:l?.info2,info3:l?.info3,listName:this.#p(s,a),tooltip:o,system:{actionType:s,actionId:i}}}#v(e){return!1}#A(e){return this.showUnequippedItems&&!["consumable","spell","feat"].includes(e.type)||e.system.equipped&&"consumable"!==e.type}#k(e){return this.showUnchargedItems||!!e.system.uses?.value||!e.system.uses?.max}#w(e){if("character"!==this.actor?.type&&this.showUnequippedItems)return!0;if(this.showUnpreparedSpells)return!0;return new Set(Object.keys(CONFIG.crucible.spellPreparationModes).filter((e=>"prepared"!==e))).has(e.system.preparation.mode)||e.system.preparation.prepared}#p(e,t){return`${`${game.i18n.localize(i[e])}: `??""}${t}`??""}#C(e){return{info1:"spell"===e.type?this.#_(e):this.#D(e),info2:this.#M(e),info3:this.#x(e)}}#_(e){if(!this.displaySpellInfo)return null;const t=e.system?.properties;if(!t)return null;const s={text:"",title:""},i=Object.entries({vocal:"crucible.ComponentVerbal",somatic:"crucible.ComponentSomatic",material:"crucible.ComponentMaterial"}).filter((([e])=>t[e])).map((([e,t])=>(s.text+=game.i18n.localize(`${t}Abbr`),game.i18n.localize(t))));return t.ritual&&(i.push(`[${game.i18n.localize("crucible.Ritual")}]`),s.text+=` [${game.i18n.localize("crucible.RitualAbbr")}]`),s.title=i.join(", "),s}#e(){const e=["hero","adversary"];return this.actors.every((t=>e.includes(t.type)))?this.actors:[]}#t(){const e=["hero","adversary"];return this.actors.every((t=>e.includes(t.type)))?this.tokens:[]}#D(e){const t=e?.system?.quantity??0;return{text:t>1?t:"",title:`${game.i18n.localize("crucible.Quantity")}: ${t}`}}#M(e){const t=e?.system?.uses;if(!(t?.max>0))return{};const s="charges"===t.recovery[0]?.period?"":` ${game.i18n.localize("crucible.per")} `,i=CONFIG.crucible.limitedUsePeriods[t.recovery[0]?.period]?.label??t.recovery[0]?.period,a=i?`${s}${i}`:"",n=`${t.max-(t.spent??0)}/${t.max}`;return{text:n,title:`${n}${a}`}}#x(e){const t=e?.system?.activities?.contents[0],s=t?.consumption?.targets?.[0],i=s?.target,a=s?.type,n=s?.value;if(!i||!a||i===e.id)return{};if("attribute"===a){const e=i.substr(0,i.lastIndexOf(".")),t=foundry.utils.getProperty(this.actor.system,e);if(t){const e=`${t.value??"0"}${t.max?`/${t.max}`:""}`;return{text:e,title:`${e} ${t.label??""}`}}}else{const e=this.actor.items?.get(i);if(e&&"charges"===a)return this.#M(e);if(e?.system?.quantity){const t=`${n>1?`${n} ${game.i18n.localize("crucible.of")} `:""}${e.system.quantity}`;return{text:t,title:`${t} ${e.name}`}}}return{}}#s(e){if(y.getSetting("showSlowActions"))return e;const t=new Set(["minute","hour","day"]);return new Map([...e.entries()].filter((([e,s])=>{const i=s.system?.activation?.type;return!t.has(i)})))}#z(e){const t=CONFIG.crucible.proficiencyLevels[e]??"",s=u[e];return s?`<i class="${s}" title="${t}"></i>`:""}#$(e){const t=CONFIG.crucible.abilityActivationTypes[e]??"",s=a[e]?.icon;return s?`<i class="${s}" title="${t}"></i>`:""}#U(e){if("spell"!==e?.type||!this.displaySpellInfo||!e.system?.properties?.has("concentration"))return null;const t=game.i18n.localize("crucible.Scroll.RequiresConcentration");return`<crucible-icon src="${n}" title="${t}">`}#L(e){if("spell"!==e?.type||!this.showUnpreparedSpells)return null;const t=e.system.level,s=e.system.preparation.mode,i=e.system.preparation.prepared,a=i?r:`${r} tah-icon-disabled`,n="always"===s?game.i18n.localize("crucible.SpellPrepAlways"):i?game.i18n.localize("crucible.SpellPrepared"):game.i18n.localize("crucible.SpellUnprepared");return"prepared"!==s&&"always"!==s||0===t?null:`<i class="${a}" title="${n}"></i>`}async#T(e){if("none"===this.tooltipsSetting)return"";const t=e?.name??"";if("nameOnly"===this.tooltipsSetting)return t;const s=!1===e.system?.identified,i="string"==typeof e?.system?.description?e?.system?.description:(s?e?.system?.unidentified?.description:e?.system?.description?.value)??"";let a,n,l,o;return s||(a=e?.modifiers??null,n=[...e.system?.chatProperties??[],...e.system?.equippableItemCardProperties??[],e.system?.parent?.labels?.activation,e.system?.parent?.labels?.target,e.system?.parent?.labels?.range,e.system?.parent?.labels?.duration].filter((e=>e)),l=s?null:e?.rarity??null,o="weapon"===e?.type?this.#E(e?.system?.properties):null),{name:t,description:i,modifiers:a,properties:n,rarity:l,traits:o}}async#m(e,t){if("none"===this.tooltipsSetting)return"";const s=CONFIG.statusEffects.find((t=>t.id===e));if("nameOnly"===this.tooltipsSetting||!s)return t;const i=s.reference?await fromUuid(s.reference):null;return{label:t,description:i?.text?.content??"",relativeTo:i}}async#d(e){if("none"===this.tooltipsSetting)return"";if("string"==typeof e)return e;const t=game.i18n.localize(e.name);if("nameOnly"===this.tooltipsSetting)return t;const s=`<h3>${t}</h3>`,i=e.relativeTo??this.actor,a=e?.descriptionLocalised??await TextEditor.enrichHTML(game.i18n.localize(e?.description??""),{async:!0,relativeTo:i,secrets:!0}),n=e?.rarity?`<span class="tah-tag ${e.rarity}">${game.i18n.localize(p[e.rarity])}</span>`:"",l=e?.properties?`<div class="tah-properties">${e.properties.map((e=>`<span class="tah-property">${game.i18n.localize(e)}</span>`)).join("")}</div>`:"",o=e?.traits?e.traits.map((e=>`<span class="tah-tag">${game.i18n.localize(e.label??e)}</span>`)).join(""):"",c=e?.traits2?e.traits2.map((e=>`<span class="tah-tag tah-tag-secondary">${game.i18n.localize(e.label??e)}</span>`)).join(""):"",r=e?.traitsAlt?e.traitsAlt.map((e=>`<span class="tah-tag tah-tag-alt">${game.i18n.localize(e.label)}</span>`)).join(""):"",u=e?.modifiers?`<div class="tah-tags">${e.modifiers.filter((e=>e.enabled)).map((e=>`<span class="tah-tag tah-tag-transparent">${game.i18n.localize(e.label)} ${`${e.modifier>=0?"+":""}${e.modifier??""}`}</span>`)).join("")}</div>`:"",d=[n,o,c,r].join(""),m=d?`<div class="tah-tags">${d}</div>`:"";return a||m||u?`<div>${s}${m||u?`<div class="tah-tags-wrapper">${m}${u}</div>`:""}${a}${l}</div>`:t}#E(e){return e?Object.entries(e).filter((([e,t])=>t&&CONFIG.crucible.validProperties.weapon.has(e))).map((([e,t])=>game.i18n.localize(CONFIG.crucible.itemProperties[e]))):null}}}));let b=null;function register(t){game.settings.register(e.ID,"abbreviateSkills",{name:game.i18n.localize("tokenActionHud.crucible.settings.abbreviateSkills.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.abbreviateSkills.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showSlowActions",{name:game.i18n.localize("tokenActionHud.crucible.settings.showSlowActions.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showSlowActions.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"displaySpellInfo",{name:game.i18n.localize("tokenActionHud.crucible.settings.displaySpellInfo.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.displaySpellInfo.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showUnchargedItems",{name:game.i18n.localize("tokenActionHud.crucible.settings.showUnchargedItems.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showUnchargedItems.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showUnequippedItems",{name:game.i18n.localize("tokenActionHud.crucible.settings.showUnequippedItems.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showUnequippedItems.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showUnequippedItemsNpcs",{name:game.i18n.localize("tokenActionHud.crucible.settings.showUnequippedItemsNpcs.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showUnequippedItemsNpcs.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showUnpreparedSpells",{name:game.i18n.localize("tokenActionHud.crucible.settings.showUnpreparedSpells.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showUnpreparedSpells.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showItemsWithoutActivationCosts",{name:game.i18n.localize("tokenActionHud.crucible.settings.showItemsWithoutActivationCosts.name"),hint:game.i18n.localize("tokenActionHud.crucible.settings.showItemsWithoutActivationCosts.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{b=class RollHandler extends e.api.RollHandler{async handleActionClick(t){const{actionType:s,actionId:i}=this.action.system;if(this.actor)await this.handleAction(t,s,this.actor,this.token,i);else for(const a of e.api.Utils.getControlledTokens()){const e=a.actor;await this.handleAction(t,s,e,a,i)}}async handleAction(e,t,s,i,a){switch(t){case"action":s.actions[a].use();break;case"ability":this.rollAbility(e,s,a);break;case"check":this.rollAbilityTest(e,s,a);break;case"save":this.rollAbilitySave(e,s,a);break;case"condition":if(!i)return;await this.toggleCondition(s,i,a);break;case"counter":await this.modifyCounter(e,s);break;case"effect":await this.toggleEffect(s,a);break;case"exhaustion":await this.modifyExhaustion(e,s);break;case"feature":case"item":case"spell":case"weapon":this.isRenderItem()?this.renderItem(s,a):this.useItem(e,s,a);break;case"magicItem":await this.rollMagicItem(s,a);break;case"skill":s.rollSkill(a,{dialog:!0});break;case"utility":await this.performUtilityAction(e,s,i,a)}}async modifyCounter(e,t){switch(this.action?.system?.counterKey){case"death-saves":this.rollDeathSave(e,t);break;case"exhaustion":await this.modifyExhaustion(t);break;case"inspiration":await this.modifyInspiration(t);break;default:await this.modifyCustomCounter(t)}}async modifyExhaustion(e){const t=e.system.attributes.exhaustion,s=t+(this.isRightClick?-1:1);s>=0&&s!==t&&e.update({"system.attributes.exhaustion":s})}async modifyInspiration(e){const t=!e.system.attributes.inspiration;e.update({"system.attributes.inspiration":t})}async modifyCustomCounter(e){const{counterKey:t,counterType:s}=this.action.system;let i=e.getFlag(l.ID,t)||{};const setFlag=async(t,s,i)=>{i!==s&&await e.setFlag(l.ID,t,i)},adjustValue=(e,t=0,s=1)=>{const i=this.isRightClick?Math.max(0,t-s):t+s;setFlag(e,t,i)};switch(s){case"checkbox":await setFlag(id,!i);break;case"fraction":(this.isRightClick||i.max&&i.value<i.max||!i.max)&&adjustValue(`${id}.value`,i.value);break;case"number":adjustValue(id,i);break;case"successFailure":i.success=i?.success??0,i.failure=i?.failure??0,this.isCtrl?adjustValue(`${id}.failure`,i.failure):adjustValue(`${id}.success`,i.success)}}rollAbility(e,t,s){t.system?.abilities&&t.rollAbility(s,{event:e})}rollAbilitySave(e,t,s){t.system?.abilities&&t.rollAbilitySave(s,{event:e})}rollAbilityTest(e,t,s){t.system?.abilities&&t.rollAbilityTest(s,{event:e})}rollDeathSave(e,t){t.rollDeathSave({event:e})}async rollMagicItem(e){const{itemId:t,effectId:s}=this.action.system,i=await MagicItems.actor(e.id);i&&(i.roll(t,s),Hooks.callAll("forceUpdateTokenActionHud"))}rollSkill(e,t,s){t.system?.skills&&t.rollSkill(s,{event:e})}useItem(t,s,i){const a=e.api.Utils.getItem(s,i);this.#F(a)?a.rollRecharge():a.use({event:t,legacy:!1})}#F(e){return"recharge"===e?.system?.uses?.period&&!(e?.system?.uses?.value>0)}async performUtilityAction(e,t,s,i){switch(i){case"deathSave":this.rollDeathSave(e,t);break;case"endTurn":if(!s||game.combat?.current?.tokenId!==s.id)break;await(game.combat?.nextTurn());break;case"initiative":await this.rollInitiative(t);break;case"inspiration":await this.modifyInspiration(t);break;case"longRest":t.longRest();break;case"shortRest":t.shortRest()}Hooks.callAll("forceUpdateTokenActionHud")}async rollInitiative(e){e&&(await e.rollInitiative({createCombatants:!0}),Hooks.callAll("forceUpdateTokenActionHud"))}async toggleCondition(e,t,s){if(!t)return;const i=CONFIG.statusEffects.find((e=>e.id===s)),a=i?.flags?.["dfreds-convenient-effects"]?.isConvenient??s.startsWith("Convenient Effect");if(game.dfreds&&a){const e=i.name??i.label;await game.dfreds.effectInterface.toggleEffect(e,{overlay:!!this.isRightClick})}else{const t=this.#O(s);if(!t)return;const i=this.#q(e,s);i?.disabled&&await i.delete(),await e.toggleStatusEffect(t.id,{active:i?.disabled??!0,overlay:!!this.isRightClick})}Hooks.callAll("forceUpdateTokenActionHud")}#O(e){return CONFIG.statusEffects.find((t=>t.id===e))}#q(e,t){return e.effects.find((e=>e.statuses.every((e=>e===t))))}async toggleEffect(e,t){const s=e.allApplicableEffects().find((e=>e.id===t));s&&(this.isRightClick&&!s.transfer?await s.delete():await s.update({disabled:!s.disabled}),Hooks.callAll("forceUpdateTokenActionHud"))}async handleActionHover(t){const{actionType:s,actionId:i}=this.action.system;if(!["feature","item","spell","weapon","magicItem"].includes(s))return;const a=e.api.Utils.getItem(this.actor,i);this.isHover?Hooks.call("tokenActionHudSystemActionHoverOn",t,a):Hooks.call("tokenActionHudSystemActionHoverOff",t,a)}}}));let f=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{f=class SystemManager extends e.api.SystemManager{getActionHandler(){return new g}getAvailableRollHandlers(){return{core:"Core Crucible"}}getRollHandler(e){let t;return t=new b,t}registerSettings(e){register(e)}async registerDefaults(){return h}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"2.0",SystemManager:f},Hooks.call("tokenActionHudSystemReady",t)}));export{i as ACTION_TYPE,a as ACTIVATION_TYPE,g as ActionHandler,n as CONCENTRATION_ICON,t as CORE_MODULE,l as CUSTOM_crucible,h as DEFAULTS,o as FEATURE_GROUP_IDS,c as GROUP,e as MODULE,r as PREPARED_ICON,u as PROFICIENCY_LEVEL_ICON,p as RARITY,s as REQUIRED_CORE_MODULE_VERSION,d as RITUAL_ICON,b as RollHandler,m as SPELL_GROUP_IDS,f as SystemManager,y as Utils,register};
//# sourceMappingURL=token-action-hud-crucible.min.js.map
